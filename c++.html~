<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2020-06-13 周六 19:20 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org mode" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org74ddef3">1. std</a></li>
<li><a href="#org7b39510">2. 定义抽象数据类型</a></li>
<li><a href="#org1a64ac5">3. 内存泄露</a>
<ul>
<li><a href="#org4c72fa2">3.1. 内存是如何泄露的</a>
<ul>
<li><a href="#orgc0b033c">3.1.1. 经验 #1：尽量避免在堆上分配内存</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-org74ddef3" class="outline-2">
<h2 id="org74ddef3"><span class="section-number-2">1</span> std</h2>
<div class="outline-text-2" id="text-1">
<p>
std::是个名称空间标识符，C++标准库中的函数或者对象都是在命名空间std中定义的，所以我们要使用标准库中的函数或者对象都要用std来限定。
</p>

<p>
至于为什么将cout放到名字空间std中，是因为象cout这样的对象在实际操作中或许会有好多个，比如说你自己也可能会不小心定义一个对象叫cout，那么这两个cout对象就会产生冲突。
</p>


<p>
一般来说，std都是要调用C++标准库时使用。比如：使用标准库文件iostream时，要写上std;使用非标准库文件iostream.h，不用写。如图引入非标准库iostream.h时，省去了std::
</p>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #F92672;">#include</span> <span style="color: #E6DB74;">&lt;iostream.h&gt;</span>
</pre>
</div>

<p>
当然使用标准库时，也是可以省略的，不过需要进行处理
</p>

<ol class="org-ol">
<li>分别将cout和endl释放出来</li>
</ol>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #F92672;">#include</span> <span style="color: #E6DB74;">&lt;iostream&gt;</span>
<span style="color: #F92672;">using</span> <span style="color: #AE81FF;">std</span>::<span style="color: #66D9EF;">cout</span>;
<span style="color: #F92672;">using</span> <span style="color: #AE81FF;">std</span>::<span style="color: #66D9EF;">endl</span>;
</pre>
</div>

<ol class="org-ol">
<li>将命名空间释放出来</li>
</ol>

<p>
注：using namespace std 告诉编辑器我们将要使用名字空间std中的函数或者对象，所以cout和endl前面不用注明他们是std这个名字空间中的cout和endl
</p>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #F92672;">#include</span> <span style="color: #E6DB74;">&lt;iostream&gt;</span>
<span style="color: #F92672;">using</span> <span style="color: #F92672;">namespace</span> <span style="color: #AE81FF;">std</span>;
</pre>
</div>
</div>
</div>

<div id="outline-container-org7b39510" class="outline-2">
<h2 id="org7b39510"><span class="section-number-2">2</span> 定义抽象数据类型</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #F92672;">struct</span> <span style="color: #66D9EF;">ListNode</span> {
    <span style="color: #66D9EF;">int</span> <span style="color: #FD971F;">val</span>;
    <span style="color: #66D9EF;">ListNode</span> *<span style="color: #FD971F;">next</span>;
    <span style="color: #A6E22E;">ListNode</span>() : val(0), next(<span style="color: #AE81FF;">nullptr</span>) {}
    <span style="color: #A6E22E;">ListNode</span>(<span style="color: #66D9EF;">int</span> <span style="color: #FD971F;">x</span>) : val(x), next(<span style="color: #AE81FF;">nullptr</span>) {}
    <span style="color: #A6E22E;">ListNode</span>(<span style="color: #66D9EF;">int</span> <span style="color: #FD971F;">x</span>, <span style="color: #66D9EF;">ListNode</span> *<span style="color: #FD971F;">next</span>) : val(x), next(next) {}
};
</pre>
</div>

<p>
如果调用 <code>ListNode(5)</code> 那么 <code>val=5</code> ， <code>next</code> 指针为空指针
</p>
</div>
</div>
<div id="outline-container-org1a64ac5" class="outline-2">
<h2 id="org1a64ac5"><span class="section-number-2">3</span> 内存泄露</h2>
<div class="outline-text-2" id="text-3">
<p>
new 和 delete 是 C++ 用于管理堆内存的两个运算符，对应于C语言中的 malloc 和 free，但是 malloc 和 free 是函数，而new 和 delete 是运算符。除此之外，new 在申请内存的同时，还会调用对象的构造函数，而 malloc 只会申请内存；同样，delete 在释放内存之前，会调用对象的析构函数，而 free 只会释放内存。
</p>

<p>
new运算符申请内存：将调用相应的 operator new(size<sub>t</sub>) 函数动态分配内存，在分配到的动态内存块上 初始化 相应类型的对象（构造函数）并返回其首地址。如果调用构造函数初始化对象时抛出异常，则自动调用 operator delete(void*, void*) 函数释放已经分配到的内存。
</p>

<p>
delete运算符释放内存：调用相应类型的析构函数，处理类内部可能涉及的资源释放，调用相应的 operator delete(void *) 函数。
</p>
</div>
<div id="outline-container-org4c72fa2" class="outline-3">
<h3 id="org4c72fa2"><span class="section-number-3">3.1</span> 内存是如何泄露的</h3>
<div class="outline-text-3" id="text-3-1">
<p>
在 C++ 程序中，主要涉及到的内存就是“栈”和“堆”
</p>


<div class="figure">
<p><img src="%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/2020-06-13_19-16-48_v2-f3189547daa4548bc4ab6fdd13eeea6d_720w.png" alt="2020-06-13_19-16-48_v2-f3189547daa4548bc4ab6fdd13eeea6d_720w.png" />
</p>
</div>

<p>
通常来说，一个线程的栈内存是有限的，通常来说是 8M 左右（取决于运行的环境）。栈上的内存通常是由编译器来自动管理的。当在栈上分配一个新的变量时，或进入一个函数时，栈的指针会下移，相当于在栈上分配了一块内存。我们把一个变量分配在栈上，也就是利用了栈上的内存空间。当这个变量的生命周期结束时，栈的指针会上移，相同于回收了内存。
</p>

<p>
由于栈上的内存的分配和回收都是由编译器控制的，所以在栈上是不会发生内存泄露的，只会发生栈溢出（Stack Overflow），也就是分配的空间超过了规定的栈大小。
</p>

<p>
而堆上的内存是由程序直接控制的，程序可以通过 malloc/free 或 new/delete 来分配和回收内存，如果程序中通过 malloc/new 分配了一块内存，但忘记使用 free/delete 来回收内存，就发生了内存泄露。
</p>
</div>

<div id="outline-container-orgc0b033c" class="outline-4">
<h4 id="orgc0b033c"><span class="section-number-4">3.1.1</span> 经验 #1：尽量避免在堆上分配内存</h4>
<div class="outline-text-4" id="text-3-1-1">
<p>
既然只有堆上会发生内存泄露，那第一原则肯定是避免在堆上面进行内存分配，尽可能的使用栈上的内存，由编译器进行分配和回收，这样当然就不会有内存泄露了。
</p>

<p>
然而，只在栈上分配内存，在有 IO 的情况下是存在一定局限性的。
</p>

<p>
举个例子，为了完成一个请求，我们通常会为这个请求构造一个 Context 对象，用于描述和这个请求有关的一些上下文。例如下面一段代码：
</p>
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #A6E22E;">Foo</span>(<span style="color: #66D9EF;">Reuqest</span>* <span style="color: #FD971F;">req</span>) {
    <span style="color: #66D9EF;">RequestContext</span> <span style="color: #FD971F;">ctx</span>(req);
    HandleRequest(&amp;ctx);
}
</pre>
</div>
<p>
如果 HandleRequest 是一个同步函数，当这个函数返回时，请求就可以被处理完成，那么显然 ctx 是可以被分配在栈上的。
</p>

<p>
但如果 HandleRequest 是一个异步函数，例如：
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #A6E22E;">HandleRequest</span>(<span style="color: #66D9EF;">RequestContext</span>* <span style="color: #FD971F;">ctx</span>, <span style="color: #66D9EF;">Callback</span> <span style="color: #FD971F;">cb</span>);
</pre>
</div>

<p>
那么显然，ctx 是不能被分配在栈上的，因为如果 ctx 被分配在栈上，那么当 Foo 函数推出后，ctx 对象的生命周期也就结束了。而 FooCB 中显然会使用到 ctx 对象。
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #A6E22E;">HandleRequest</span>(<span style="color: #66D9EF;">RequestContext</span>* <span style="color: #FD971F;">ctx</span>, <span style="color: #66D9EF;">Callback</span> <span style="color: #FD971F;">cb</span>);

<span style="color: #66D9EF;">void</span> <span style="color: #A6E22E;">Foo</span>(<span style="color: #66D9EF;">Reuqest</span>* <span style="color: #FD971F;">req</span>) {
    <span style="color: #F92672;">auto</span> <span style="color: #FD971F;">ctx</span> = <span style="color: #F92672;">new</span> <span style="color: #66D9EF;">RequestContext</span>(req);
    HandleRequest(ctx, FooCB);
}

<span style="color: #66D9EF;">void</span> <span style="color: #A6E22E;">FooCB</span>(<span style="color: #66D9EF;">RequestContext</span>* <span style="color: #FD971F;">ctx</span>) {
    FinishRequest(ctx);
    <span style="color: #F92672;">delete</span> ctx;
}
</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Created: 2020-06-13 周六 19:20</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
