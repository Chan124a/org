* 安装方法
** 1.下载MySQL：https://dev.mysql.com/downloads/（官网），这里我们选择社区版，如下图

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-36-14.png @ 2021-03-07 14:36:45
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-36-45_Snipaste_2021-03-07_14-36-14.png]]
接下来我们选择下载安装版，点击"Go to Download Page>"进入下载页
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-36-23.png @ 2021-03-07 14:37:09
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-37-09_Snipaste_2021-03-07_14-36-23.png]]
这里已经提示安装包是32位的，但是将安装32位和64位的，所以我们直接下载其中一个就好
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-36-30.png @ 2021-03-07 14:37:07
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-37-07_Snipaste_2021-03-07_14-36-30.png]]
** 2.安装MySQL
2.1.运行安装包，勾选同意，Next

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-38-35.png @ 2021-03-07 14:40:55
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-55_Snipaste_2021-03-07_14-38-35.png]]
2.2.选择安装类型

第一个选项包含了一些MySQL其他组件，如果只安装MySQL数据库，选择第二项Server only就行。这里我直接选择默认的Developer Default
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-38-40.png @ 2021-03-07 14:40:51
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-51_Snipaste_2021-03-07_14-38-40.png]]
2.3.检查必需项（Check Requirements）

  Execute-->Next；出现警告框点击“是”继续
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-38-48.png @ 2021-03-07 14:40:48
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-48_Snipaste_2021-03-07_14-38-48.png]]
4.Installation

 点击Execute开始执行安装，等全部安装完之后，点击Next
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-38-59.png @ 2021-03-07 14:40:46
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-46_Snipaste_2021-03-07_14-38-59.png]]
5.进入配置界面 Product Configuration，Next
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-07.png @ 2021-03-07 14:40:43
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-43_Snipaste_2021-03-07_14-39-07.png]]
6.进行服务配置，MySQL默认端口为3306，Next
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-12.png @ 2021-03-07 14:40:42
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-42_Snipaste_2021-03-07_14-39-12.png]]
7.Accounts and Roles

 这里一般不添加具有普通用户权限的MySQL用户账户，而是用root账户。
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-21.png @ 2021-03-07 14:40:30
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-30_Snipaste_2021-03-07_14-39-21.png]]
8.Windows Service

这里注意MySQL服务名（Windows Service Name）为:MySQL56
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-27.png @ 2021-03-07 14:40:27
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-27_Snipaste_2021-03-07_14-39-27.png]]
9.Apply Configuration(应用配置)

 点击Execute
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-32.png @ 2021-03-07 14:40:25
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-25_Snipaste_2021-03-07_14-39-32.png]]
10.配置完成之后Finish
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-38.png @ 2021-03-07 14:40:23
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-23_Snipaste_2021-03-07_14-39-38.png]]
11.然后再配置MySQL的实例，点击next

  Check-->Next-->Execute
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-44.png @ 2021-03-07 14:40:21
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-21_Snipaste_2021-03-07_14-39-44.png]]
12.执行完毕之后点击Finish，又回到了主程序，然后点击Next
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-50.png @ 2021-03-07 14:40:18
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-18_Snipaste_2021-03-07_14-39-50.png]]
13.安装完成，Finish
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-39-57.png @ 2021-03-07 14:40:15
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_14-40-15_Snipaste_2021-03-07_14-39-57.png]]

** 3.MySQL环境变量的配置
为了能让Windows命令行操作MySQL数据库，需要配置一下系统的环境变量。
右击“我的电脑”-->"属性"-->"高级系统设置"-->"高级"-->"环境变量"，在打开的窗口中选择 “系统变量” 下的 “新建” 按钮创建环境变量。
** 没有配置向导的解决方法
*** 安装MySQL服务
以管理员方式打开命令行窗口，进入MySQL\MySQL Server 5.7\bin目录，执行命令 mysqld --install

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-39-37.png @ 2021-03-07 22:39:43
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-39-43_Snipaste_2021-03-07_22-39-37.png]]

表示服务安装成功，如果你进入Windows服务管理界面就可以看到MySQL服务了，如下：
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-41-03.png @ 2021-03-07 22:41:16
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-41-16_Snipaste_2021-03-07_22-41-03.png]]
然后启动服务，正常情况下会正常启动，但是很不幸它不正常：
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-41-09.png @ 2021-03-07 22:41:13
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-41-13_Snipaste_2021-03-07_22-41-09.png]]
*** 初始化mysql
执行命令 mysqld --initialize --console 在这里，初始化会产生一个随机密码,如下图框框所示，记住这个密码，后面会用到

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-45-28.png @ 2021-03-07 22:45:32
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-45-32_Snipaste_2021-03-07_22-45-28.png]]
*** 开启mysql的服务(net start mysql)

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-46-24.png @ 2021-03-07 22:46:29
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-46-29_Snipaste_2021-03-07_22-46-24.png]]
*** 登录验证
登录验证，mysql是否安装成功！(要注意上面产生的随机密码，不包括前面符号前面的空格，否则会登陆失败)，如果和下图所示一样，则说明你的mysql已经安装成功！注意，，一定要先开启服务，不然会登陆失败，出现拒绝访问的提示符！！！
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-47-38.png @ 2021-03-07 22:47:43
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-47-43_Snipaste_2021-03-07_22-47-38.png]]

** 修改密码
由于初始化产生的随机密码太复杂，，不便于我们登录mysql，因此，我们应当修改一个自己能记住的密码！！
#+BEGIN_EXAMPLE
alter user 'root'@'localhost' identified by '新密码';
#+END_EXAMPLE

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-54-50.png @ 2021-03-07 22:54:54
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-54-54_Snipaste_2021-03-07_22-54-50.png]]
再次登录验证新密码：
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-55-04.png @ 2021-03-07 22:55:09
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-55-09_Snipaste_2021-03-07_22-55-04.png]]

** 设置系统的全局变量
将 MySQL\MySQL Server 5.7\bin 添加进环境变量即可

配置完成之后，每当我们想要用命令行使用mysql时，只需要win+R，-->输入"cmd"打开命令行，之后输入登录sql语句即可。
** ini配置文件
在mysql目录下创建一个ini或cnf配置文件，在这里我创建的是ini配置文件，里面写的代码是mysql的一些基本配置（可不用）
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_22-59-29.png @ 2021-03-07 22:59:33
[[file:%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/2021-03-07_22-59-33_Snipaste_2021-03-07_22-59-29.png]]
#+BEGIN_EXAMPLE
[mysqld]
character-set-server=utf8mb4
bind-address=0.0.0.0
port=3306
default-storage-engine=INNODB
[mysql]
default-character-set=utf8mb4
[client]
default-character-set=utf8mb4
#+END_EXAMPLE
* 基础概念
MySQL 为关系型数据库(Relational Database Management System), 这种所谓的"关系型"可以理解为"表格"的概念, 一个关系型数据库由一个或数个表格组成, 如图所示的一个表格:
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-07_14-12-33.png @ 2021-03-07 14:12:37
[[file:%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/2021-03-07_14-12-37_Snipaste_2021-03-07_14-12-33.png]]

- 表头(header): 每一列的名称;
- 列(row): 具有相同数据类型的数据的集合;
- 行(col): 每一行用来描述某个人/物的具体信息;
- 值(value): 行的具体信息, 每个值必须与该列的数据类型相同;
- 键(key): 表中用来识别某个特定的人\物的方法, 键的值在当前列中具有唯一性。

* 常用命令参考
- 安装服务：mysqld --install
- 初始化：　mysqld --initialize --console
- 开启服务：net start mysql
- 关闭服务：net stop mysql
- 登录mysql：mysql -u root -p
- 修改密码：alter user 'root'@'localhost' identified by 'root';(by 接着的是密码)
- 标记删除mysql服务：sc delete mysql
* Window下MySQL服务的启动、停止与卸载
在 Windows 命令提示符下运行:
- 启动: net start MySQL
- 停止: net stop MySQL
- 卸载: sc delete MySQL

* MySQL脚本的基本组成
与常规的脚本语言类似, MySQL 也具有一套对字符、单词以及特殊符号的使用规定, MySQL 通过执行 SQL 脚本来完成对数据库的操作, 该脚本由一条或多条MySQL语句(SQL语句 + 扩展语句)组成, 保存时脚本文件后缀名一般为 .sql。在控制台下, MySQL 客户端也可以对语句进行单句的执行而不用保存为.sql文件。

- 标识符
#+BEGIN_EXAMPLE
标识符用来命名一些对象, 如数据库、表、列、变量等, 以便在脚本中的其他地方引用。MySQL标识符命名规则稍微有点繁琐, 这里我们使用万能命名规则: 标识符由字母、数字或下划线(_)组成, 且第一个字符必须是字母或下划线。
对于标识符是否区分大小写取决于当前的操作系统, Windows下是不敏感的, 但对于大多数 linux\unix 系统来说, 这些标识符大小写是敏感的。
#+END_EXAMPLE
- 关键字: MySQL的关键字众多, 这里不一一列出, 在学习中学习。 这些关键字有自己特定的含义, 尽量避免作为标识符。
- 语句: MySQL语句是组成MySQL脚本的基本单位, 每条语句能完成特定的操作, 他是由 SQL 标准语句 + MySQL 扩展语句组成。
- 函数: MySQL函数用来实现数据库操作的一些高级功能, 这些函数大致分为以下几类: 字符串函数、数学函数、日期时间函数、搜索函数、加密函数、信息函数。
* MySQL中的数据类型
MySQL有三大类数据类型, 分别为数字、日期\时间、字符串, 这三大类中又更细致的划分了许多子类型:
- 数字类型
 - 整数: tinyint、smallint、mediumint、int、bigint
 - 浮点数: float、double、real、decimal
- 日期和时间: date、time、datetime、timestamp、year
- 字符串类型
 - 字符串: char、varchar
 - 文本: tinytext、text、mediumtext、longtext
 - 二进制(可用来存储图片、音乐等): tinyblob、blob、mediumblob、longblob
* 使用MySQL数据库
** 登录到MySQL
当 MySQL 服务已经运行时, 我们可以通过MySQL自带的客户端工具登录到MySQL数据库中, 首先打开命令提示符, 输入以下格式的命名:

mysql -h 主机名 -u 用户名 -p

- -h : 该命令用于指定客户端所要登录的MySQL主机名, 登录当前机器该参数可以省略;
- -u : 所要登录的用户名;
- -p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。

以登录刚刚安装在本机的MySQL数据库为例, 在命令行下输入 mysql -u root -p 按回车确认, 如果安装正确且MySQL正在运行, 会得到以下响应:

Enter password:

若密码存在, 输入密码登录, 不存在则直接按回车登录, 按照本文中的安装方法, 默认 root 账号是无密码的。登录成功后你将会看到 Welecome to the MySQL monitor... 的提示语。

然后命令提示符会一直以 mysql> 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。
** 创建一个数据库
使用 create database 语句可完成对数据库的创建, 创建命令的格式如下:

create database 数据库名 [其他选项];

例如我们需要创建一个名为 samp_db 的数据库, 在命令行下执行以下命令:

create database samp_db character set gbk;

为了便于在命令提示符下显示中文, 在创建时通过 character set gbk 将数据库字符编码指定为 gbk。创建成功时会得到 Query OK, 1 row affected(0.02 sec) 的响应。

注意: MySQL语句以分号(;)作为语句的结束, 若在语句结尾不添加分号时, 命令提示符会以 -> 提示你继续输入(有个别特例, 但加分号是一定不会错的);

提示: 可以使用 show databases; 命令查看已经创建了哪些数据库。
** 选择所要操作的数据库
要对一个数据库进行操作, 必须先选择该数据库, 否则会提示错误:

ERROR 1046(3D000): No database selected

两种方式对数据库进行使用的选择:

一: 在登录数据库时指定, 命令: mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p

例如登录时选择刚刚创建的数据库: mysql -D samp_db -u root -p

二: 在登录后使用 use 语句指定, 命令: use 数据库名;

use 语句可以不加分号, 执行 use samp_db 来选择刚刚创建的数据库, 选择成功后会提示: Database changed
** 创建数据库表
使用 create table 语句可完成对表的创建, create table 的常见形式:

create table 表名称(列声明);

以创建 students 表为例, 表中将存放 学号(id)、姓名(name)、性别(sex)、年龄(age)、联系电话(tel) 这些内容:

	create table students
	（
		id int unsigned not null auto_increment primary key,
		name char(8) not null,
		sex char(4) not null,
		age tinyint unsigned not null,
		tel char(13) null default "-"
	);
				
对于一些较长的语句在命令提示符下可能容易输错, 因此我们可以通过任何文本编辑器将语句输入好后保存为 createtable.sql 的文件中, 通过命令提示符下的文件重定向执行执行该脚本。

打开命令提示符, 输入: mysql -D samp_db -u root -p < createtable.sql

(提示: 1.如果连接远程主机请加上 -h 指令; 2. createtable.sql 文件若不在当前工作目录下需指定文件的完整路径。)

*** 语句解说:

create table tablename(columns) 为创建数据库表的命令, 列的名称以及该列的数据类型将在括号内完成;

括号内声明了5列内容, id、name、sex、age、tel为每列的名称, 后面跟的是数据类型描述, 列与列的描述之间用逗号(,)隔开;

以 "id int unsigned not null auto_increment primary key" 行进行介绍:

- "id" 为列的名称;
- "int" 指定该列的类型为 int(取值范围为 -8388608到8388607), 在后面我们又用 "unsigned" 加以修饰, 表示该类型为无符号型, 此时该列的取值范围为 0到16777215;
- "not null" 说明该列的值不能为空, 必须要填, 如果不指定该属性, 默认可为空;
- "auto_increment" 需在整数列中使用, 其作用是在插入数据时若该列为 NULL, MySQL将自动产生一个比现存值更大的唯一标识符值。默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。在每张表中仅能有一个这样的值且所在列必须为索引列。
- "primary key" 表示该列是表的主键, 本列的值必须唯一, MySQL将自动索引该列。

下面的 char(8) 表示存储的字符长度为8, tinyint的取值范围为 -127到128, default 属性指定当该列值为空时的默认值。

提示: 1. 使用 show tables; 命令可查看已创建了表的名称; 2. 使用 describe 表名; 命令可查看已创建的表的详细信息。
* 插入、查询、更新、删除表中的数据
** 向表中插入数据
insert 语句可以用来将一行或多行数据插到数据库表中, 使用的一般形式如下:

insert [into] 表名 [(列名1, 列名2, 列名3, ...)] values (值1, 值2, 值3, ...);

其中 [] 内的内容是可选的, 例如, 要给 samp_db 数据库中的 students 表插入一条记录, 执行语句:

insert into students values(NULL, "王刚", "男", 20, "13811371377");

按回车键确认后若提示 Query Ok, 1 row affected (0.05 sec) 表示数据插入成功。 若插入失败请检查是否已选择需要操作的数据库。

有时我们只需要插入部分数据, 或者不按照列的顺序进行插入, 可以使用这样的形式进行插入:

insert into students (name, sex, age) values("孙丽华", "女", 21);
** 查询表中的数据
select 语句常用来根据一定的查询规则到数据库中获取数据, 其基本的用法为:

select 列名称 from 表名称 [查询条件];

例如要查询 students 表中所有学生的名字和年龄, 输入语句 select name, age from students; 执行结果如下:
#+BEGIN_EXAMPLE
mysql> select name, age from students;
	+--------+-----+
	| name   | age |
	+--------+-----+
	| 王刚   |  20 |
	| 孙丽华 |  21 |
	| 王永恒 |  23 |
	| 郑俊杰 |  19 |
	| 陈芳   |  22 |
	| 张伟朋 |  21 |
	+--------+-----+
	6 rows in set (0.00 sec)

	mysql>
#+END_EXAMPLE
也可以使用通配符 * 查询表中所有的内容, 语句: select * from students;

*** 按特定条件查询
where 关键词用于指定查询条件, 用法形式为: select 列名称 from 表名称 where 条件;

以查询所有性别为女的信息为例, 输入查询语句: select * from students where sex="女";

where 子句不仅仅支持 "where 列名 = 值" 这种名等于值的查询形式, 对一般的比较运算的运算符都是支持的, 例如=、>、<、>=、<、!=以及一些扩展运算符 is [not] null、in、like 等等。 还可以对查询条件使用 or 和 and 进行组合查询, 以后还会学到更加高级的条件查询方式, 这里不再多做介绍。

示例:
- 查询年龄在21岁以上的所有人信息: select * from students where age > 21;
- 查询名字中带有 "王" 字的所有人信息: select * from students where name like "%王%";
- 查询id小于5且年龄大于20的所有人信息: select * from students where id<5 and age>20;

** 更新表中的数据
update 语句可用来修改表中的数据, 基本的使用形式为:

update 表名称 set 列名称=新值 where 更新条件;

使用示例:
- 将id为5的手机号改为默认的"-": update students set tel=default where id=5;
- 将所有人的年龄增加1: update students set age=age+1;
- 将手机号为 13288097888 的姓名改为 "张伟鹏", 年龄改为 19: update students set name="张伟鹏", age=19 where tel="13288097888";

** 删除表中的数据
delete 语句用于删除表中的数据, 基本用法为:

delete from 表名称 where 删除条件;

使用示例:
- 删除id为2的行: delete from students where id=2;
- 删除所有年龄小于21岁的数据: delete from students where age<20;
- 删除表中的所有数据: delete from students;
* 创建后表的修改
alter table 语句用于创建后对表的修改, 基础用法如下:

** 添加列
基本形式: alter table 表名 add 列名 列数据类型 [after 插入位置];

示例:
- 在表的最后追加列 address: alter table students add address char(60);
- 在名为 age 的列后插入列 birthday: alter table students add birthday date after age;

** 修改列的名称和数据类型
基本形式: alter table 表名 change 列名称 列新名称 新数据类型;

示例:
- 将表 tel 列改名为 telphone: alter table students change tel telphone char(13) default "-";
- 将 name 列的数据类型改为 char(16): alter table students change name name char(16) not null;

** 删除列
基本形式: alter table 表名 drop 列名称;

示例:
- 删除 birthday 列: alter table students drop birthday;

** 重命名表
基本形式: alter table 表名 rename 新表名;

示例:
- 重命名 students 表为 workmates: alter table students rename workmates;

* 删除表、数据库
** 删除整张表
基本形式: drop table 表名;

示例: 删除 workmates 表: drop table workmates;

** 删除整个数据库
基本形式: drop database 数据库名;

示例: 删除 samp_db 数据库: drop database samp_db;
* 数据结构及算法基础
** 索引的本质
MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。

我们知道，数据库查询是数据库的最主要功能之一。我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。最基本的查询算法当然是顺序查找（linear search），这种复杂度为O(n)的算法在数据量很大时显然是糟糕的，好在计算机科学的发展提供了很多更优秀的查找算法，例如二分查找（binary search）、二叉树查找（binary tree search）等。如果稍微分析一下会发现，每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上，但是数据本身的组织结构不可能完全满足各种数据结构（例如，理论上不可能同时将两列都按顺序进行组织），所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。

看一个例子：

#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-08_14-48-21.png @ 2021-03-08 14:48:30
[[file:%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2021-03-08_14-48-30_Snipaste_2021-03-08_14-48-21.png]]
图1展示了一种可能的索引方式。左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在O(log2n)的复杂度内获取到相应数据。

虽然这是一个货真价实的索引，但是实际的数据库系统几乎没有使用二叉查找树或其进化品种红黑树（red-black tree）实现的，原因会在下文介绍。
** B-Tree和B+Tree
目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构，在本文的下一节会结合存储器原理及计算机存取原理讨论为什么B-Tree和B+Tree在被如此广泛用于索引，这一节先单纯从数据结构角度描述它们。

*** B-Tree
为了描述B-Tree，首先定义一条数据记录为一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构：
- d为大于1的一个正整数，称为B-Tree的度。
- h为一个正整数，称为B-Tree的高度。
- 每个非叶子节点由n-1个key和n个指针组成，其中d<=n<=2d。
- 每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。
- 所有叶节点具有相同的深度，等于树高h。
- key和指针互相间隔，节点两端是指针。
- 一个节点中的key从左到右非递减排列。
- 每个指针要么为null，要么指向另外一个节点。
- 如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于v(key1)，其中v(key1)为node的第一个key的值。
- 如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于v(keym)，其中v(keym)为node的最后一个key的值。
- 如果某个指针在节点node的左右相邻key分别是keyi和keyi+1且不为null，则其指向节点的所有key小于v(keyi+1)且大于v(keyi)。

图2是一个d=2的B-Tree示意图。
#+DOWNLOADED: file:E%3A/org/%E5%9B%BE%E7%89%87/Snipaste_2021-03-08_15-01-45.png @ 2021-03-08 15:02:04
[[file:%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/2021-03-08_15-02-04_Snipaste_2021-03-08_15-01-45.png]]
由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。B-Tree上查找算法的伪代码如下：
#+BEGIN_EXAMPLE
BTree_Search(node, key) {
    if(node == null) return null;
    foreach(node.key)
    {
        if(node.key[i] == key) return node.data[i];
            if(node.key[i] > key) return BTree_Search(point[i]->node);
    }
    return BTree_Search(point[i+1]->node);
}
data = BTree_Search(root, my_key);
#+END_EXAMPLE
关于B-Tree有一系列有趣的性质，例如一个度为d的B-Tree，设其索引N个key，则其树高h的上限为logd((N+1)/2)，检索一个key，其查找节点个数的渐进复杂度为O(logdN)。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。
另外，由于插入删除新的数据记录会破坏B-Tree的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持B-Tree性质，本文不打算完整讨论B-Tree这些内容，因为已经有许多资料详细说明了B-Tree的数学性质及插入删除算法，有兴趣的朋友可以在本文末的参考文献一栏找到相应的资料进行阅读。

*** B+Tree
B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。

与B-Tree相比，B+Tree有以下不同点：

每个节点的指针上限为2d而不是2d+1。

内节点不存储data，只存储key；叶子节点不存储指针。

图3是一个简单的B+Tree示意。

