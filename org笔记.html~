<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2020-06-03 周三 20:13 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org mode" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org7bf0ebb">1. 标题</a>
<ul>
<li><a href="#org515536c">1.1. 视图循环</a></li>
<li><a href="#org435ceb8">1.2. 移动</a></li>
<li><a href="#org9e802ca">1.3. 结构编辑</a></li>
<li><a href="#org8e83868">1.4. Sparse 树</a></li>
</ul>
</li>
<li><a href="#org3fe5765">2. 列表</a></li>
<li><a href="#org98d8519">3. 脚注</a></li>
<li><a href="#org06cf53f">4. 表格</a></li>
<li><a href="#org15629ab">5. 超链接</a>
<ul>
<li><a href="#org563c54d">5.1. 内部链接</a></li>
<li><a href="#orgb80c0e1">5.2. 外部链接</a></li>
<li><a href="#org1a75cdb">5.3. 目标链接</a></li>
<li><a href="#orgaabd597">5.4. 快捷键</a></li>
<li><a href="#orgb9122be">5.5. 关于插入图片的方法</a></li>
</ul>
</li>
<li><a href="#org58f6cb4">6. 待办事项</a>
<ul>
<li><a href="#org3dd08de">6.1. 使用TODO状态</a></li>
<li><a href="#orgb0c7114">6.2. 多状态工作流</a></li>
<li><a href="#org7b84852">6.3. 优先级</a></li>
<li><a href="#org308841e">6.4. 任务细分</a></li>
<li><a href="#org66c8a8b">6.5. 复选框</a></li>
</ul>
</li>
<li><a href="#org3291d7e">7. 标签</a></li>
<li><a href="#org0b4f4af">8. 日期和时间</a></li>
<li><a href="#org2486b6c">9. 区块</a>
<ul>
<li><a href="#orgb9b5ab6">9.1. 折叠区块</a></li>
</ul>
</li>
<li><a href="#org41883e0">10. 代码</a>
<ul>
<li><a href="#org3077bd8">10.1. 代码块的结构</a></li>
<li><a href="#org413761d">10.2. 编辑代码块</a>
<ul>
<li><a href="#orgffc2c6d">10.2.1. 设置自动保存</a></li>
<li><a href="#org8ad7e0b">10.2.2. 设置进入buffer后的行为</a></li>
</ul>
</li>
<li><a href="#orgbb9fa4c">10.3. 导出代码块及其结果</a></li>
<li><a href="#org5de4962">10.4. 执行代码块</a>
<ul>
<li><a href="#org05716a3">10.4.1. Library of Babel</a></li>
</ul>
</li>
<li><a href="#org7c4c25f">10.5. header arguments</a>
<ul>
<li><a href="#org2c849fe">10.5.1. 设置header arguments</a></li>
<li><a href="#org37553a1">10.5.2. header arguments说明</a></li>
</ul>
</li>
<li><a href="#org4f1937d">10.6. 处理代码块的运行结果</a></li>
<li><a href="#orgf7c4aa0">10.7. 代码块相关快捷键与函数</a></li>
</ul>
</li>
<li><a href="#org6dedcf6">11. Capture(捕获) - Refile(整理) - Archive(归档)</a>
<ul>
<li><a href="#org6447a0f">11.1. Capture</a>
<ul>
<li><a href="#org2511265">11.1.1. 设置capture的记录保存位置和快捷键</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgd722988">12. 快速输入 #+BEGIN<sub>SRC</sub> … #+END<sub>SRC</sub></a></li>
<li><a href="#orge63042b">13. 导出</a>
<ul>
<li><a href="#org08fcfa2">13.1. 生成目录表</a></li>
<li><a href="#org8c05b20">13.2. 为每个分节的标题添加标号</a></li>
<li><a href="#org4d1ee99">13.3. 禁用下划线转义</a></li>
<li><a href="#org39bb73d">13.4. 让不同级别的标题采用不同大小的字体</a></li>
</ul>
</li>
<li><a href="#org4818892">14. 两个与中文相关的问题</a>
<ul>
<li><a href="#org3c3f178">14.1. 不关闭中文输入法，输入章节标题里面的星号</a></li>
<li><a href="#org3fd2d6d">14.2. 中英文字体混排时的表格对齐问题</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-org7bf0ebb" class="outline-2">
<h2 id="org7bf0ebb"><span class="section-number-2">1</span> 标题</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org515536c" class="outline-3">
<h3 id="org515536c"><span class="section-number-3">1.1</span> 视图循环</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>TAB              子树循环：当加上一个前缀参数时（C-u TAB），在下面的状态中改变当前子树的视图</li>
<li>S+TAB            全局视图循环</li>
<li>C-u C-u C-u TAB  显示全部</li>
</ol>
</div>
</div>
<div id="outline-container-org435ceb8" class="outline-3">
<h3 id="org435ceb8"><span class="section-number-3">1.2</span> 移动</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>C-c C-n	下个标题</li>
<li>C-c C-p	上个标题</li>
<li>C-c C-f	下个同级的标题</li>
<li>C-c C-b	上个同级的标题</li>
<li>C-c C-u	回到上层标题</li>
</ol>
</div>
</div>
<div id="outline-container-org9e802ca" class="outline-3">
<h3 id="org9e802ca"><span class="section-number-3">1.3</span> 结构编辑</h3>
<div class="outline-text-3" id="text-1-3">
<ol class="org-ol">
<li>M-RET 插入一个同级标题。如果光标在文本列表中，创建一个新的项。如果处于一行的中间，这一行会被分开，后面的一部分成为新的标题。</li>
<li>C-RET 与M-RET类似，但如果处于一行的中间，不会把后面的内容作为标题</li>
<li>M-S-RET              插入一个和当前标题同级的 TODO 项</li>
<li>C-S-RET              与M-S-RET类似</li>
<li>TAB（新的空的条目中）	如果新的条目中还没有文字，TAB 可以调整级别。</li>
<li>M-LEFT/RIGHT	        将当前的标题提升/降低一个等级。</li>
<li>M-S-LEFT/RIGHT	将当前子提升/降低一个等级。</li>
<li>M-S-UP/DOWN	        将子树上/下移（和前/后个子树交换）。</li>
<li>C-c C-w              将条目或区域重新归档到其他位置。</li>
<li>C-x n s和C-x n w    可将当前子树放到缓冲区，然后再次。</li>
</ol>
</div>
</div>
<div id="outline-container-org8e83868" class="outline-3">
<h3 id="org8e83868"><span class="section-number-3">1.4</span> Sparse 树</h3>
<div class="outline-text-3" id="text-1-4">
<p>
C-c /
</p>

<p>
C-c / r
</p>
</div>
</div>
</div>

<div id="outline-container-org3fe5765" class="outline-2">
<h2 id="org3fe5765"><span class="section-number-2">2</span> 列表</h2>
<div class="outline-text-2" id="text-2">
<p>
无序列表项以 -、+或者*开头。
</p>

<p>
有序列表项以1.、1)或者开头。
</p>

<p>
描述列表用::将项和描述分开。
</p>

<p>
同一列表中的项的第一行必须缩进相同程度
</p>

<ol class="org-ol">
<li>TAB           	折叠项</li>
<li>M-RET        	在当前级别插入一个项，有前缀时是强制新建一个标题</li>
<li>M-S-RET	        插入一个带有复先框的项（见 2.5 节［复先框］）</li>
<li>M-S-UP/DOWN	        将当前项和它的子项向上/下移动（和相同的缩进的前/后一个项交换位置）。如果列表是有序的，数字会自动改变</li>
<li>M-LEFT/M-RIGHT	提升/降低项的缩进，不包含子项</li>
<li>M-S-LEFT/RIGHT	提升/降低项的缩进，包含子项</li>
<li>C-c C-c  	        如果项中有复先框，就触发改变其状态。并且自动保持本项的符号与缩进在列表中的一致性</li>
<li>C-c -   	        循环改变将当前列表的项标志符号</li>
</ol>

<p>
在 Org-mode 中重置有序列表序号可以直接使用 M-&lt;RET&gt; 。
</p>
</div>
</div>
<div id="outline-container-org98d8519" class="outline-2">
<h2 id="org98d8519"><span class="section-number-2">3</span> 脚注</h2>
<div class="outline-text-2" id="text-3">
<p>
脚注就是以脚注定义符号开头的一段话，脚注定义符号是将脚注名称放在一个方括号里形成的，要求放在第0列，不能有缩进。而引用就是在正文中将脚注名称用方括号括起来。例如：
</p>

<p>
The Org homepage<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> now looks a lot better than it used to.
&#x2026;
</p>
</div>
</div>
<div id="outline-container-org06cf53f" class="outline-2">
<h2 id="org06cf53f"><span class="section-number-2">4</span> 表格</h2>
<div class="outline-text-2" id="text-4">
<p>
创建表格的方法
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #A6E22E;">|Name|Phone|Age|</span>
<span style="color: #A6E22E;">|-</span>
</pre>
</div>
<p>
然后按TAB，或者输入|Name|Phone|Age|后按C-c RET
</p>

<p>
C-c | 将活动区域（选中区域）转换成一个表。
</p>

<p>
如果第一行至少有一个 TAB 字符，就用 TAB 划分内容；
</p>

<p>
如果第一行都有逗号，就分逗号划分内容；
</p>

<p>
否则就用空白符来划分区域。如果当前没有活动区域就会建立一个空的 Org 表格。
</p>

<ul class="org-ul">
<li><code>C-c C-c</code> 调整表格，不移动光标</li>
<li><code>TAB</code>         调整表格，将光标移到下一个区域，必要时新建一行</li>
<li><code>S-TAB</code>       调整表格，将光标移到上一个区域</li>
<li><code>RET</code>         调整表格，将光标移到下一行，必要时会新建一行</li>
<li><code>M-LEFT/RIGHT</code> 左/右移当前列</li>
<li><code>M-S-LEFT</code> 删除当前行</li>
<li><code>M-S-RIGHT</code> 在光标位置左边添加一列</li>
<li><code>M-UP/DOWN</code> 上/下移当前行</li>
<li><code>M-S-UP</code> 删除当前行</li>
<li><code>M-S-DOWN</code> 在当前行上面添加一行。如果有前缀，则在下面添加一行</li>
<li><code>C-c -</code> 在当前行下面添加一个水平线。如果带前缀，则在上面添加一行水平线</li>
<li><code>C-c RET</code> 在当前行下面添加一个水平线。并将光标移动到下一行</li>
<li><code>C-c ^</code> 将表排序。当前位置所在的列作为排序的依据。排序在距当前位置最近的两个水平线之间的行（或者整个表）中进行</li>
</ul>
</div>
</div>
<div id="outline-container-org15629ab" class="outline-2">
<h2 id="org15629ab"><span class="section-number-2">5</span> 超链接</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">
<pre class="src src-org"><span style="color: #66D9EF; text-decoration: underline;"><a href="link">description</a></span>  &#25110;&#32773;  <span style="color: #66D9EF; text-decoration: underline;"><a href="link">link</a></span>
</pre>
</div>
</div>
<div id="outline-container-org563c54d" class="outline-3">
<h3 id="org563c54d"><span class="section-number-3">5.1</span> 内部链接</h3>
<div class="outline-text-3" id="text-5-1">
<p>
如果一个链接地址并不是 URL 的形式，就会作为当前文件内部链接来处理。
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #66D9EF; text-decoration: underline;"><a href="#my-custom-id">#my-custom-id</a></span> #&#38142;&#25509;&#21040; CUSTOM_ID &#23646;&#24615;&#26159; &#8220;my-custom-id&#8221; &#30340;&#39033;&#12290;

<span style="color: #66D9EF; text-decoration: underline;"><a href="My Target">My Target</a></span> <span style="color: #66D9EF; text-decoration: underline;"><a href="My Target">Find my target</a></span> #&#28857;&#20987;&#21518;&#26412;&#25991;&#20214;&#20013;&#26597;&#25214;&#23545;&#24212;&#30340;&#30446;&#26631; &#8220;<span style="text-decoration: underline;">&lt;&lt;My Target&gt;&gt;</span>&#8221; 
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb80c0e1" class="outline-3">
<h3 id="orgb80c0e1"><span class="section-number-3">5.2</span> 外部链接</h3>
<div class="outline-text-3" id="text-5-2">
<p>
Org 支持的链接格式包括文件、网页、新闻组、BBDB 数据库项、IRC 会话和记录。
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #66D9EF; text-decoration: underline;"><a href="http://www.astro.uva.nl/~dominik">http://www.astro.uva.nl/~dominik</a></span>            on the web
<span style="color: #66D9EF; text-decoration: underline;"><a href="file:/home/dominik/images/jupiter.jpg">file:/home/dominik/images/jupiter.jpg</a></span>       file, absolute path
/home/dominik/images/jupiter.jpg            same as above
<span style="color: #66D9EF; text-decoration: underline;"><a href="file:papers/last.pdf">file:papers/last.pdf</a></span>                        file, relative path
<span style="color: #66D9EF; text-decoration: underline;"><a href="file:projects.org">file:projects.org</a></span>                           another Org file
<span style="color: #66D9EF; text-decoration: underline;"><a href="docview:papers/last.pdf::NNN">docview:papers/last.pdf::NNN</a></span>                open file in doc-view mode at page NNN
id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID
<span style="color: #66D9EF; text-decoration: underline;"><a href="news:comp.emacs">news:comp.emacs</a></span>                             Usenet link
<span style="color: #66D9EF; text-decoration: underline;"><a href="mailto:adent@galaxy.net">mailto:adent@galaxy.net</a></span>                     Mail link
vm:folder                                   VM folder link
vm:folder#id                                VM message link
wl:folder#id                                WANDERLUST message link
<span style="color: #66D9EF; text-decoration: underline;"><a href="mhe:folder#id">mhe:folder#id</a></span>                               MH-E message link
<span style="color: #66D9EF; text-decoration: underline;"><a href="rmail:folder#id">rmail:folder#id</a></span>                             RMAIL message link
<span style="color: #66D9EF; text-decoration: underline;"><a href="gnus:group#id">gnus:group#id</a></span>                               Gnus article link
<span style="color: #66D9EF; text-decoration: underline;"><a href="bbdb:R.*Stallman">bbdb:R.*Stallman</a></span>                            BBDB link (with regexp)
<span style="color: #66D9EF; text-decoration: underline;"><a href="irc:/irc.com/#emacs/bob">irc:/irc.com/#emacs/bob</a></span>                     IRC link
<span style="color: #66D9EF; text-decoration: underline;"><a href="info:org:External%20links">info:org:External%20links</a></span>                   Info node link (with encoded space)
</pre>
</div>
</div>
</div>
<div id="outline-container-org1a75cdb" class="outline-3">
<h3 id="org1a75cdb"><span class="section-number-3">5.3</span> 目标链接</h3>
<div class="outline-text-3" id="text-5-3">
<p>
文件链接可以包含一些其他信息使得进入链接时可以到达特定的位置。比如双冒号之后的一个行号或者搜索选项。
</p>

<p>
下面是一些包含搜索定位功能的链接例子以及其说明：
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #66D9EF; text-decoration: underline;"><a href="file:~/code/main.c::255">file:~/code/main.c::255</a></span>                     &#36827;&#20837;&#21040; 255 &#34892;
<span style="color: #66D9EF; text-decoration: underline;"><a href="file:~/xx.org::My">file:~/xx.org::My</a></span> Target                    &#25214;&#21040;&#30446;&#26631;&#8216;<span style="text-decoration: underline;">&lt;&lt;My Target&gt;&gt;</span>&#8217;
<span style="color: #66D9EF; text-decoration: underline;"><a href="file:~/xx.org/::#my-custom-id">file:~/xx.org/::#my-custom-id</a></span>               &#26597;&#25214;&#33258;&#23450;&#20041; id &#30340;&#39033;
</pre>
</div>
</div>
</div>
<div id="outline-container-orgaabd597" class="outline-3">
<h3 id="orgaabd597"><span class="section-number-3">5.4</span> 快捷键</h3>
<div class="outline-text-3" id="text-5-4">
<ul class="org-ul">
<li><code>C-c l</code> 在当前位置保存一个链接。这是一个全局命令（你可以设置自己的快捷键），可以在任何类型的缓冲区中使用。链接保存下来以便以后插入 Org 文件中。</li>
<li><code>C-c C-l</code> 插入一个链接。它会让你输入，你可以输入一个链接，也可心用上/下键来获取保存的链接。它还会让你输入描述信息。</li>
<li><code>C-c C-l</code> （光标在链接上）	当光标处于链接上时，你可以修改链接</li>
<li><code>C-c C-o</code> 或者 <code>mouse-1</code> 或者 <code>mouse-2</code> 打开链接</li>
<li><code>C-c &amp;</code> 跳回到一个已记录的地址。用 <code>C-c %</code> 可以将地址记录下来，内部链接后面的命令也会自动将地址记录下来。使用这个命令多次可以一直往前定位。</li>
</ul>
</div>
</div>

<div id="outline-container-orgb9122be" class="outline-3">
<h3 id="orgb9122be"><span class="section-number-3">5.5</span> 关于插入图片的方法</h3>
<div class="outline-text-3" id="text-5-5">
<ol class="org-ol">
<li>使用系统自带方法</li>
<li>org-download插件</li>
</ol>
<p>
org-download本身会自动在org文档当前目录下创建一个与文档同名的文件夹来保存图片，然后支持多种途径的图片插入，插入之后会复制或者下载一张图片到图片文件夹下面：
</p>
<ul class="org-ul">
<li>用url把图片插入，然后自动下载；</li>
<li>复制图片文件路径，然后插入；</li>
<li>拖拽图片插入。</li>
</ul>

<p>
但是，org-download不会把剪切板中的图片自动保存一个图片文件，然后插入。所以，必须要借助于外部程序。可以使用任意一个带命令行参数的图片保存器将剪切板中的图片进行保存。有人写了一个csharp的程序，很小很小就可以做到了。我这里直接使用ImageMagick ，因为这个软件实在是太强大了，而且是免费的。路径我们可以根据自己的安装路径来进行配置，然后，先调用里面的convert.exe把剪切板里面的图片保存到一个临时目录下面。我这里是 d:/temp/ ，这个可以根据自己的需要来设置。然后，定义了一个快捷键 C-S-Y ，比原来的粘贴键多了一个shift，就可以粘贴图片了。
</p>

<p>
截图软件：剪切板中的图片可以是从另外一个地方复制来的，但更多的场景是使用截图软件进行截图，然后粘贴的。我使用的截图软件是faststone，程序很小，但是功能很强大，既可以截图也可以录视频，还可以编辑视频，对于简单的插入便条，字幕之类的处理，特别方便。还可以设置快捷键，截选择框、窗口、滚动条内窗口内容等等，非常方便。
</p>
</div>
</div>
</div>

<div id="outline-container-org58f6cb4" class="outline-2">
<h2 id="org58f6cb4"><span class="section-number-2">6</span> 待办事项</h2>
<div class="outline-text-2" id="text-6">
</div>
<div id="outline-container-org3dd08de" class="outline-3">
<h3 id="org3dd08de"><span class="section-number-3">6.1</span> 使用TODO状态</h3>
<div class="outline-text-3" id="text-6-1">
<p>
当标题以TODO开头时就成为一个TODO项
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #75715E;">#</span><span style="color: #75715E;">*** TODO &#26631;&#39064;</span>
</pre>
</div>
<p>
注意空格位置。
</p>

<p>
改变 TODO 的状态会触发标签改变。查看选项 org-todo-state-tags-triggers 的描述获得更多信息
</p>

<ul class="org-ul">
<li><code>C-c C-t</code> 将当前项的状态在（unmarked）-&gt;TODO-&gt;DONE 之间循环切换，同样的切换也可以在时间轴（timeline） 和议程（ agenda） 的缓冲区（buffer）中用 t 键“远程”进行。</li>
<li><code>S-RIGHT/LEFT</code> 选择下一个/上一个 TODO 状态，与上面的循环方式相同。</li>
<li><code>C-c / t</code> 在稀疏树中显示 TODO 项。将 buffer 折叠，但是会显示 TODO 项和它们所在的层次的标题。</li>
<li><code>C-c a t</code> 显示全局 TODO 列表。从所有的议程文件中收集 TODO 项到一个缓冲区中。详见 10.3.2 节。</li>
<li><code>S-M-RET</code> 在当前项下插入一个新的 TODO 项。</li>
</ul>
</div>
</div>
<div id="outline-container-orgb0c7114" class="outline-3">
<h3 id="orgb0c7114"><span class="section-number-3">6.2</span> 多状态工作流</h3>
<div class="outline-text-3" id="text-6-2">
<p>
你可以用 TODO 关键字来定义不同的状态，用以处理项，比如：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #F92672;">setq</span> org-todo-keywords
      '((sequence <span style="color: #E6DB74;">"TODO"</span> <span style="color: #E6DB74;">"FEEDBACK"</span> <span style="color: #E6DB74;">"VERIFY"</span> <span style="color: #E6DB74;">"|"</span> <span style="color: #E6DB74;">"DONE"</span> <span style="color: #E6DB74;">"DELEGATED"</span>)))
</pre>
</div>
<p>
竖直线将 TODO 关键字（还需要进一步的动作）和 DONE 状态（不需要进一步的动作）分隔开。
</p>

<p>
如果你不给出竖直线，最后一个状态会作为 DONE 状态。
</p>

<p>
设置之后，C-c C-t 就会将状态从 TODO 转换到 FEEDBACK，再转换到 VERIFY，最后到 DONE 和 DELEGATED。
</p>

<p>
有时你可能希望同时使用几个不同的 TODO 状态集合。例如，你可能想要一个基本的 TODO/DONE，以及一个修改 bug 的工作流程和一个隔开的状态来表示取消的项目（既还是 DONE，也不需要进一步的动作），你可以这样设置：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #F92672;">setq</span> org-todo-keywords
      '((sequence <span style="color: #E6DB74;">"TODO(t)"</span> <span style="color: #E6DB74;">"|"</span> <span style="color: #E6DB74;">"DONE(d)"</span>)
        (sequence <span style="color: #E6DB74;">"REPORT(r)"</span> <span style="color: #E6DB74;">"BUG(b)"</span> <span style="color: #E6DB74;">"KNOWNCAUSE(k)"</span> <span style="color: #E6DB74;">"|"</span> <span style="color: #E6DB74;">"FIXED(f)"</span>)
        (sequence <span style="color: #E6DB74;">"|"</span> <span style="color: #E6DB74;">"CANCELED(c)"</span>)))
</pre>
</div>

<p>
关键字应该各不相同，这样对于一个选项 Org 才知道该用哪个状态序列（集合）。
</p>

<p>
例子中也给出了快速使用一个关键字的方法，就是在关键字后面括号中给出快捷字母——当用 C-c C-t时，会询问，让你输入一个字母。
</p>

<p>
要定义只在一个文件中有效的 TODO 关键字，可以在文件中任意地方给出下面的文本：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+TODO: TODO(t) | DONE(d)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
#+TODO: | CANCELED(c)
</pre>
</div>
<p>
当改变这些行中的一行后，光标停留在改变行上，用 C-c C-c 让改变生效。
</p>
</div>
</div>
<div id="outline-container-org7b84852" class="outline-3">
<h3 id="org7b84852"><span class="section-number-3">6.3</span> 优先级</h3>
<div class="outline-text-3" id="text-6-3">
<p>
Org模式支持三个优先级别：’A‘、’B‘和’C‘。
</p>

<p>
’A‘是最高级别，如不指定，’B‘是默认的。
</p>

<p>
优先级只在议程中有用。
</p>

<ul class="org-ul">
<li><code>C-c</code> ,	设置当前标题的优先级。按’‘’‘’‘选择一个级别，或者SPC删除标记（cookie）。</li>
<li><code>S-UP</code></li>
<li><code>S-Down</code> 增加/减少当前标题的优先级。</li>
</ul>
</div>
</div>
<div id="outline-container-org308841e" class="outline-3">
<h3 id="org308841e"><span class="section-number-3">6.4</span> 任务细分</h3>
<div class="outline-text-3" id="text-6-4">
<p>
你可以在标题的任何地方插入‘<code>[/]</code>’或者‘<code>[%]</code>’。
</p>

<p>
当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些标记状态也会随之更新。
</p>

<div class="org-src-container">
<pre class="src src-org-mode">#* Organize Party [33%]
#** TODO Call people [1/2]
#*** TODO Peter
#*** DONE Sarah
#** TODO Buy food
#** DONE Talk to neighbor
</pre>
</div>
</div>
</div>

<div id="outline-container-org66c8a8b" class="outline-3">
<h3 id="org66c8a8b"><span class="section-number-3">6.5</span> 复选框</h3>
<div class="outline-text-3" id="text-6-5">
<p>
当纯文本中的项以‘[]’开头时，就会变成一个复选框。
</p>

<p>
复选框不会包含在全局 TODO 列表中，所以它们很适合地将一个任务划分成几个简单的步骤。
</p>

<p>
下面是一个复选框的例子：
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #75715E;">#</span><span style="color: #75715E;">* TODO Organize party [1/3]</span>
<span style="color: #75715E;">#  </span><span style="color: #75715E;">- [-] call people [1/2]</span>
<span style="color: #75715E;">#    </span><span style="color: #75715E;">- [ ] Peter</span>
<span style="color: #75715E;">#    </span><span style="color: #75715E;">- [X] Sarah</span>
<span style="color: #75715E;">#  </span><span style="color: #75715E;">- [X] order food</span>
<span style="color: #75715E;">#  </span><span style="color: #75715E;">- [ ] think about what music to play</span>
</pre>
</div>
<p>
复选框是分层工作的。所以如果一个复选框项目如果还有子复选框，触发子复选框将会使该复选框变化以反映出一个、多个还是没有子复选框被选中。
</p>

<ul class="org-ul">
<li><code>C-c C-c</code> 触发复选框的状态或者（加上前缀）触发复选框的的存在状态。</li>
<li><code>M-S-RET</code> 增加一个带有复选框的项。这只在光标处于纯文本列表</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org3291d7e" class="outline-2">
<h2 id="org3291d7e"><span class="section-number-2">7</span> 标签</h2>
</div>
<div id="outline-container-org0b4f4af" class="outline-2">
<h2 id="org0b4f4af"><span class="section-number-2">8</span> 日期和时间</h2>
</div>
<div id="outline-container-org2486b6c" class="outline-2">
<h2 id="org2486b6c"><span class="section-number-2">9</span> 区块</h2>
<div class="outline-text-2" id="text-9">
<p>
Org-mode使用begin…end块来实现很多功能,比如引入源代码.在这些区块的第一行上按TAB键可以折叠/扩展该区块. 
</p>
</div>
<div id="outline-container-orgb9b5ab6" class="outline-3">
<h3 id="orgb9b5ab6"><span class="section-number-3">9.1</span> 折叠区块</h3>
<div class="outline-text-3" id="text-9-1">
<p>
你也可以在设置在启动时自动折叠所有的块,方法是配置变量’org-hide-block-startup’或者在每个文件加上
</p>
</div>
</div>
</div>

<div id="outline-container-org41883e0" class="outline-2">
<h2 id="org41883e0"><span class="section-number-2">10</span> 代码</h2>
<div class="outline-text-2" id="text-10">
<p>
<code>C-c C-,</code> 可以快速插入不同类型的代码块
</p>
</div>
<div id="outline-container-org3077bd8" class="outline-3">
<h3 id="org3077bd8"><span class="section-number-3">10.1</span> 代码块的结构</h3>
<div class="outline-text-3" id="text-10-1">
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: &lt;name&gt;</span>
#+BEGIN_SRC &lt;language&gt; &lt;switches&gt; &lt;header arguments&gt;
   &lt;body&gt;
</pre>
</div>
<p>
#+END<sub>SRC</sub>
</p>

<p>
其中
</p>
<ul class="org-ul">
<li><code>#+NAME</code> 行是可选的,并常用来为代码块命名,以方便在其他地方(可以跨文件)调用该代码块. <code>&lt;name&gt;</code> 应该是唯一的,否则结果未定义</li>

<li><code>&lt;language&gt;</code> 指明了代码块中的代码是哪种语言的代码</li>

<li><code>&lt;switchers&gt;</code> 也是可选的,它控制了代码块的导出方式</li>

<li><code>&lt;header arguments&gt;</code> 也是可选的,它控制了代码块的执行,导出与抽取的各方面的行为. <code>&lt;header arguments&gt;</code> 还可以通过buffer或subtree的属性来控制</li>

<li><code>&lt;body&gt;</code> 为代码块的具体内容</li>
</ul>
</div>
</div>

<div id="outline-container-org413761d" class="outline-3">
<h3 id="org413761d"><span class="section-number-3">10.2</span> 编辑代码块</h3>
<div class="outline-text-3" id="text-10-2">
<p>
使用 <code>C-c '</code> 来编辑当前的代码块. 它会新开一个编辑buffer,进入&lt;language&gt;的major mode,并插入代码块的原内容.
在该编辑buffer中按 <code>C-x C-s</code> 会将编辑buffer中的内容写回原代码块. 
若编辑完后,想退出编辑窗口,再按一次 <code>C-c '</code> 即可.
</p>
</div>
<div id="outline-container-orgffc2c6d" class="outline-4">
<h4 id="orgffc2c6d"><span class="section-number-4">10.2.1</span> 设置自动保存</h4>
<div class="outline-text-4" id="text-10-2-1">
<p>
你可以通过设置 <code>org-edit-src-auto-save-idle-delay</code> 的值来设置空闲多少秒后自动保存buffer内容. 或者通过设置 <code>org-edit-src-turn-on-auto-save</code> 来让进入代码块后自动开启 <code>auto-save-mode</code>
</p>
</div>
</div>
<div id="outline-container-org8ad7e0b" class="outline-4">
<h4 id="org8ad7e0b"><span class="section-number-4">10.2.2</span> 设置进入buffer后的行为</h4>
<div class="outline-text-4" id="text-10-2-2">
<p>
在按 <code>C-c '</code> 进入编辑buffer后,会自动激活 <code>org-src-mode</code>. 同时,还可以通过以下变量来设置编辑buffer的其他行为(更多配置项请参见配置组 <code>org-edit-structure</code>)
</p>

<ul class="org-ul">
<li><p>
org-src-lang-modes
</p>

<p>
若 <code>&lt;lang&gt;-mode</code> 存在,则默认编辑buffer会进入该major-mode. 但通过设置该变量可以映射任意的 <code>&lt;lang&gt;</code> 为其他的major-mode
</p></li>

<li><p>
org-src-window-setup
</p>

<p>
该变量控制了当创建编辑buffer后,各window怎么排列
</p></li>

<li><p>
org-src-preserve-indentation
</p>

<p>
该变量控制了是否保持代码块中的空格为空格,而不转换为TAB.
</p>

<p>
默认为nil,表示将代码块中的空格转换为TAB. 当代码块中的代码为类似python这种对空格缩进很严格的语言时,最好设置为t
</p></li>

<li><p>
org-src-ask-before-returnning-to-edit-buffer
</p>

<p>
当已经存在编辑buffer的情况下,再次按下 <code>C-c '</code>,该变量控制是否弹出提示.
</p></li>

<li><p>
org-src-fontify-natively
</p>

<p>
在 <code>org</code> buffer中,也高亮显示代码块中的代码.
</p></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgbb9fa4c" class="outline-3">
<h3 id="orgbb9fa4c"><span class="section-number-3">10.3</span> 导出代码块及其结果</h3>
<div class="outline-text-3" id="text-10-3">
<p>
<code>:exports</code> 这一header argument控制了导出org文件时是否导出代码块及其执行结果
</p>

<ul class="org-ul">
<li><p>
:exports code
</p>

<p>
大多数语言的默认设置(ditta是个例外). 表示只导出代码块的内容
</p></li>

<li><p>
:exports results  
</p>

<p>
表示导出结果
</p></li>

<li><p>
:exports both
</p>

<p>
代码块及其计算结果都被导出
</p></li>

<li><p>
:exports none
</p>

<p>
代码块及其计算结果都不会被导出
</p></li>
</ul>


<p>
<code>org-export-babel-evaluate</code> 变量可以控制在导出org时,哪些代码块可以被执行
</p>

<dl class="org-dl">
<dt>nil</dt><dd>所有代码块都不会执行,这在包含有不安全的代码块时特别有用</dd>
<dt>inline-only</dt><dd>只有inline 代码块会被执行. 非inline代码块需要人手工执行,这一特性常用于避免在导出时执行过于消耗资源的代码</dd>
</dl>
</div>
</div>
<div id="outline-container-org5de4962" class="outline-3">
<h3 id="org5de4962"><span class="section-number-3">10.4</span> 执行代码块</h3>
<div class="outline-text-3" id="text-10-4">
<p>
执行的结果与代码块之间会有一行间隔文本,该间隔默认为 <code>#+RESULTS</code> (该值由 <code>org-babel-results-keyword</code> 的值决定). 
若代码块的Header argument开启了cache,则间隔行文本还可能有一个cache标识符
</p>

<p>
默认只有 <code>emacs-lisp</code> 的代码块能够被执行,但是可以通过设置 <code>org-babel-load-languages</code> 的值来决定哪些语言的代码块能够被执行.
</p>

<p>
最简单的执行代码块的办法就是把光标定位到代码块中,然后按下 <code>C-c C-c</code> 
</p>

<p>
若为代码块命名了,则可以在org buffer或org table的任意地方执行该代码块. 但前提是该代码块位于当前org buffer或 <code>Library of Babel</code> 中. 
</p>

<p>
执行指定名称代码块的方法为使用单独的 <code>#+CALL:</code> 行或它的嵌入式语法
</p>

<p>
<code>#+CALL:</code> 的语法为:
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+CALL: &lt;name&gt;(&lt;arguments&gt;)</span>
<span style="color: #75715E;">#+CALL: &lt;name&gt;[&lt;inside header arguments&gt;](&lt;arguments&gt;) &lt;end header arguments&gt;</span>
</pre>
</div>
<p>
其嵌入式语法为:
</p>
<div class="org-src-container">
<pre class="src src-org">... call_&lt;name&gt;(&lt;arguments&gt;) ...
... call_&lt;name&gt;[&lt;inside header arguments&gt;](&lt;arguments&gt;)[&lt;end header arguments&gt;] ...
</pre>
</div>

<p>
其中:
</p>
<ul class="org-ul">
<li><p>
&lt;name&gt;
</p>

<p>
要执行代码块的名字
</p></li>

<li><p>
&lt;arguments&gt;
</p>

<p>
传递给代码块的参数,该参数会覆盖代码块header argument中的参数值. 下面是一个例子
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+CALL: double(n=4)</span>
</pre>
</div></li>

<li><p>
&lt;inside header arguments&gt;
</p>

<p>
这些参数会被应用到指定的代码块中去,从而影响代码块的执行. 例如 <code>[:result output]</code> 就会搜集代码块执行过程中所有输出到 <code>STDOUT</code> 中的结果
</p></li>

<li><p>
&lt;end header arguments&gt;
</p>

<p>
这些参数作用于"calling instance"而并不会影响到指定代码块的执行. 这些参数影响的是执行结果如何插入到org buffer中以及 <code>call line</code> 语句本身export时的参数. 
</p>

<p>
例如: <code>[:results html]</code> 会在插入执行结果时,用 <code>BEGIN_HTML:</code> 块包裹起来.
</p></li>
</ul>
</div>

<div id="outline-container-org05716a3" class="outline-4">
<h4 id="org05716a3"><span class="section-number-4">10.4.1</span> Library of Babel</h4>
<div class="outline-text-4" id="text-10-4-1">
<p>
存放在 <code>Library of Babel</code> 中的代码块可以被任意org文件调用. 
</p>

<p>
The central repository of code blocks in the “Library of Babel” is housed in an Org mode file located in the ‘contrib’ directory of Org mode.
</p>

<p>
要想将某个代码块加入到 <code>Library of Babel</code> 中,只需要调用函数 <code>org-babel-lob-ingest</code> 即可,该函数的快捷键为 <code>C-c C-v i</code>
</p>
</div>
</div>
</div>
<div id="outline-container-org7c4c25f" class="outline-3">
<h3 id="org7c4c25f"><span class="section-number-3">10.5</span> header arguments</h3>
<div class="outline-text-3" id="text-10-5">
</div>
<div id="outline-container-org2c849fe" class="outline-4">
<h4 id="org2c849fe"><span class="section-number-4">10.5.1</span> 设置header arguments</h4>
<div class="outline-text-4" id="text-10-5-1">
<p>
一般来说header arguments作用域越大的优先级越低
</p>
<ul class="org-ul">
<li><p>
设置全系统的header arguments
</p>

<p>
设置 <code>org-babel-default-header-args</code> 变量可以设置全系统的header arguments. 它的默认值为
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">((<span style="color: #F92672;">:session</span> . <span style="color: #E6DB74;">"none"</span>)
 (<span style="color: #F92672;">:results</span> . <span style="color: #E6DB74;">"replace"</span>)
 (<span style="color: #F92672;">:exports</span> . <span style="color: #E6DB74;">"code"</span>)
 (<span style="color: #F92672;">:cache</span> . <span style="color: #E6DB74;">"no"</span>)
 (<span style="color: #F92672;">:noweb</span> . <span style="color: #E6DB74;">"no"</span>)
 (<span style="color: #F92672;">:hlines</span> . <span style="color: #E6DB74;">"no"</span>)
 (<span style="color: #F92672;">:tangle</span> . <span style="color: #E6DB74;">"no"</span>))
</pre>
</div></li>

<li><p>
为某种语言设置header arguments
</p>

<p>
通过设置变量 <code>org-babel-default-header-args:&lt;lang&gt;</code> 的变量值可以为特定语言设置默认header arguments. 这里&lt;lang&gt;替换为代码块的语言名称
</p></li>

<li><p>
为heading设置header arguments
</p>

<p>
通过设置heading名为 <code>header-args</code> 和 <code>header-args:&lt;lang&gt;</code> 属性,可以为某个heading下的所有代码块设置header arguments. 
</p>

<p>
这种情况下,无论 <code>org-use-property-inheritance</code> 的值是什么, 这些属性一定是基础的.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+PROPERTY: header-args:R  :session *R*</span>
<span style="color: #75715E;">#+PROPERTY: header-args    :results silent</span>
</pre>
</div>
<p>
或
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #FD971F; background-color: #272822;">* outline header</span>
<span style="color: #75715E; font-weight: bold;">:PROPERTIES: </span>
<span style="color: #75715E; font-weight: bold;">:header-args:</span> :cache yes
<span style="color: #75715E; font-weight: bold;">:END:      </span>
</pre>
</div></li>

<li><p>
为某代码块设置header arguments
</p>

<p>
为独立的代码块设置自己的header arguments是最普遍也是最灵活的方式. 方法是在 <code>#+BEGIN_SRC</code> 行后列上一系列的header arguments及其值即可. 例如
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: factorial</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC haskell :results silent :exports code :var n=0</span>
   fac 0 = 1
   fac n = n * fac (n-1)
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
当然也可以为嵌入式代码块设置header arguments. 例如
</p>
<div class="org-src-container">
<pre class="src src-org">src_haskell[:exports both]{fac 5}
</pre>
</div>

<p>
代码块的header aguments还可以分拆到多个 <code>#+HEADER:</code> 或 <code>#+HEADERS:</code> 行中,这些行放在 <code>#+BEGIN_SRC</code> 之前 <code>#+NAME:</code> 之后. 例如
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+HEADERS: :var data1=1</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var data2=2</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">      (message </span><span style="color: #E6DB74; background-color: #3E3D31;">"data1:%S, data2:%S"</span><span style="color: #F8F8F0; background-color: #3E3D31;"> data1 data2)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #75715E;">: data1:1, data2:2</span>
</pre>
</div>
<p>
或
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: named-block</span>
<span style="color: #75715E;">#+HEADER: :var data=2</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (message </span><span style="color: #E6DB74; background-color: #3E3D31;">"data:%S"</span><span style="color: #F8F8F0; background-color: #3E3D31;"> data)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: named-block</span>
<span style="color: #75715E;">: data:2</span>

</pre>
</div></li>

<li><p>
设置调用代码块时的header arguments
</p>

<p>
请参见 `执行代码块' 这一节
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org37553a1" class="outline-4">
<h4 id="org37553a1"><span class="section-number-4">10.5.2</span> header arguments说明</h4>
<div class="outline-text-4" id="text-10-5-2">
</div>
<ol class="org-ol">
<li><a id="orgf1e3567"></a>var<br />
<div class="outline-text-5" id="text-10-5-2-1">
<p>
<code>:var</code> 参数用于传递参数給代码块. 传递参数給代码块的具体方式,依各个语言的不同而改变,具体需要阅读特定语言的文档.
</p>

<p>
当为代码块设置 <code>:var</code> 参数时,总是需要为它设置一个默认值
</p>

<p>
参数的值可以是字面量,引用甚至是Emacs Lisp代码. 其中引用可以是带有 <code>#+NAME:</code>, <code>#+RESULTS:</code> 说明的table或list. <code>#+BEGIN_EXAMPLE</code> 块,其他代码块以及其他代码块的运行结果.
<b>需要注意的是,让引用另外的代码块时,被引用的代码块会被执行,除非被引用的代码块已经被缓存了运行结果</b>
</p>

<p>
<code>:var</code> 的格式为 <code>:var name=assign</code> 其中 <code>assign</code> 可以是
</p>

<ul class="org-ul">
<li><p>
table的引用
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: example-table</span>
<span style="color: #A6E22E;">| 1 |</span>
<span style="color: #A6E22E;">| 2 |</span>
<span style="color: #A6E22E;">| 3 |</span>
<span style="color: #A6E22E;">| 4 |</span>

<span style="color: #75715E;">#+NAME: table-length</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var table=example-table</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (length table)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: table-length</span>
<span style="color: #75715E;">: 4</span>
</pre>
</div>

<ul class="org-ul">
<li><p>
list的引用
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: example-list</span>
- simple
  - not
  - nested
- list

<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var x=example-list</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (print x)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #A6E22E;">| simple | list |</span>
</pre>
</div></li>

<li><p>
不带参数的代码块
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var length=table-length()</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (* 2 length)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #75715E;">: 8</span>
</pre>
</div></li>

<li><p>
带参数的代码块
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: double</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var input=8</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (* 2 input)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: double</span>
<span style="color: #75715E;">: 16</span>

<span style="color: #75715E;">#+NAME: squared</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var input=double(input=1)</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (* input input)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: squared</span>
<span style="color: #75715E;">: 4</span>
</pre>
</div></li>

<li><p>
example块
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: literal-example</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_EXAMPLE</span>
  A literal example
  on two lines
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_EXAMPLE</span>

<span style="color: #75715E;">#+NAME: read-literal-example</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var x=literal-example</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  (concatenate 'string x </span><span style="color: #E6DB74; background-color: #3E3D31;">" for you."</span><span style="color: #F8F8F0; background-color: #3E3D31;">)</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: read-literal-example</span>
<span style="color: #75715E;">: A literal example</span>
<span style="color: #75715E;">:   on two lines for you.</span>

</pre>
</div></li>

<li><p>
可索引的变量值
</p>

<p>
可以通过索引来切取变量的部分值. 索引从0开始,且支持负数,表示从后往前算.
</p>

<p>
org支持嵌套索引,其意义类似于多重数组的索引,方法是在索引与索引之间用`,'分隔
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: example-table</span>
<span style="color: #A6E22E;">| 1 | a |</span>
<span style="color: #A6E22E;">| 2 | b |</span>
<span style="color: #A6E22E;">| 3 | c |</span>
<span style="color: #A6E22E;">| 4 | d |</span>

<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var data=example-table[0,-1]</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  data</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #75715E;">: a</span>


<span style="color: #75715E;">#+NAME: 3D</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  '(((1  2  3)  (4  5  6)  (7  8  9))</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">   ((10 11 12) (13 14 15) (16 17 18))</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">   ((19 20 21) (22 23 24) (25 26 27)))</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var data=3D[1,,1]</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  data</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #A6E22E;">| 11 | 14 | 17 |</span>

</pre>
</div>

<p>
org还支持切片操作,方法是在两个索引之间使用`:'分隔
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: example-table</span>
<span style="color: #A6E22E;">| 1 | a |</span>
<span style="color: #A6E22E;">| 2 | b |</span>
<span style="color: #A6E22E;">| 3 | c |</span>
<span style="color: #A6E22E;">| 4 | d |</span>
<span style="color: #A6E22E;">| 5 | 3 |</span>

<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var data=example-table[1:3]</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  data</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #A6E22E;">| 2 | b |</span>
<span style="color: #A6E22E;">| 3 | c |</span>
<span style="color: #A6E22E;">| 4 | d |</span>
</pre>
</div>

<p>
Additionally, an empty index, or the single character ‘*’, are both interpreted to mean the entire range and as such are equivalent to ‘0:-1’
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: example-table</span>
 <span style="color: #A6E22E;">| 1 | a |</span>
 <span style="color: #A6E22E;">| 2 | b |</span>
 <span style="color: #A6E22E;">| 3 | c |</span>
 <span style="color: #A6E22E;">| 4 | d |</span>

<span style="color: #75715E; background-color: #35331D; font-style: italic;"> #+BEGIN_SRC emacs-lisp :var data=example-table[,0]</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">   data</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;"> #+END_SRC</span>

<span style="color: #75715E;"> #+RESULTS:</span>
 <span style="color: #A6E22E;">| 1 | 2 | 3 | 4 |</span>

</pre>
</div></li>

<li><p>
Emacs lisp代码
</p>

<p>
若变量的值是以 `(',`[',`''或``' 开头的,则它被认为是Emacs lisp代码,其代码的运行返回值才会作为变量真正的值. 例如:
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">   wc -w $</span><span style="color: #FD971F; background-color: #3E3D31;">filename</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
需要注意的是,若是从table或list中读取到的值是以 `(',`[',`'',``'开头的, <b>也不会被认为是elisp代码</b>
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: table</span>
 <span style="color: #A6E22E;">| (a b c) |</span>

<span style="color: #75715E;"> #+HEADERS: :var data=table[0,0]</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;"> #+BEGIN_SRC perl</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">   $</span><span style="color: #FD971F; background-color: #3E3D31;">data</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;"> #+END_SRC</span>

<span style="color: #75715E;"> #+RESULTS:</span>
 <span style="color: #75715E;">: (a b c)</span>
</pre>
</div></li>
</ul></li>
</ul>
</div>
</li>

<li><a id="org6fb030b"></a>results<br />
<div class="outline-text-5" id="text-10-5-2-2">
<p>
有四种类型的 <code>:result</code> 参数. 对于某个代码块来说,每种类型的 <code>:reslt</code> 参数值只能有一个. 这四种类型分别为:
</p>

<ul class="org-ul">
<li>collection: specify how the results should be collected from the code block

<dl class="org-dl">
<dt>value</dt><dd>默认值,表示result为代码块中最后一个语句的返回值，代码块的内容会被包含在一个函数中,然后执行该函数. 因此对于像Python这样的语言来说,若最后语句不是return,则一定返回None</dd>
<dt>output</dt><dd>result为代码块输出到STDOUT中的结果，返回的是解释器的输出结果.</dd>
</dl></li>

<li><p>
type:  specify what type of result the code block will return—which has implications for how they will be processed before insertion into the Org mode buffer
</p>

<p>
默认情况下,result会以table或scalar的形式插入到org buffer中
</p>

<dl class="org-dl">
<dt>table/vector</dt><dd>result一定以table的形式插入到org buffer中. 即使result的值是一个单值,也会被转换为一个单行单列的表格.</dd>

<dt>list</dt><dd>result会以org list的形式插入到org buffer中. 即使result的值是一个单值,也会转换为一个只有一个元素的list</dd>

<dt>scalar/verbatim</dt><dd>直接插入result的字面量,不做任何转换</dd>

<dt>file</dt><dd>result的值被认为是一个指向file的路径. result的值会被转换为一个file link再插入到org buffer中</dd>
</dl></li>

<li>format:  specify what type of result the code block will return—which has implications for how they will be inserted into the Org mode buffer

<dl class="org-dl">
<dt>raw</dt><dd>result的值被看成是raw org mode code,会被不做任何转换地插入org buffer中. 若result的值看起来是一个org table,则还会被自动排列整齐.</dd>

<dt>org</dt><dd>result的值会被包裹进 <code>BEGIN_SRC org</code> 代码块中(但默认情况下,result的值不会被逗号转义)</dd>

<dt>html</dt><dd>result的值被认为是一段html代码,因此会被包裹进 <code>BEGIN_HTML</code> 块中</dd>

<dt>latex</dt><dd>result的值被认为是一段latex代码,因此会被包裹进 <code>BEGIN_LaTex</code> 块中</dd>

<dt>code</dt><dd>result的值被认为是一段可解析的代码,因此会被包裹进代码块中.</dd>

<dt>pp</dt><dd>result的值被认为是一段可解析的代码,但在包裹进代码块之前会进行格式美化操作(converted to pretty-printed code). 目前只支持Python与Ruby</dd>

<dt>drawer</dt><dd>result的值会被包裹进一个 <code>RESULTS</code> drawer中</dd>
</dl></li>

<li>handing: specify how the results of evaluating the code block should be handled.

<dl class="org-dl">
<dt>silent</dt><dd>result会显示在minbuffer中,而不会插入到org buffer中</dd>

<dt>replace</dt><dd>默认值. 之前插入的的result会被删除,然后插入新的result结果</dd>

<dt>append</dt><dd>新的result会插入到之前result的后面</dd>

<dt>prepend</dt><dd>新的result会插入到之前result的前面.</dd>
</dl></li>
</ul>
</div>
</li>

<li><a id="org09bc25b"></a>file<br />
<div class="outline-text-5" id="text-10-5-2-3">
<p>
<code>:file</code> 参数用于指定将代码块的result保存到哪个文件中. 常与 <code>:results file</code> 配合使用
</p>

<p>
代码块执行后,会插入一条 <code>\[[file:]\]</code> 的链接到org buffer中.
</p>

<p>
<code>:file</code> 的参数值可以有两种格式:
</p>

<ul class="org-ul">
<li>一个表示文件路径的字符串</li>
<li>一个由连个字符串组成的list. 其中第一个字符串为保存的文件路径,第二个字符串为链接的描述</li>
</ul>
</div>
</li>

<li><a id="org52ae61a"></a>file-desc<br />
<div class="outline-text-5" id="text-10-5-2-4">
<p>
<code>:file-desc</code> 参数常与 <code>:file</code> 参数配合使用,用于提供链接的描述
</p>
</div>
</li>

<li><a id="org3b6cddf"></a>dir<br />
<div class="outline-text-5" id="text-10-5-2-5">
<p>
<code>:dir</code> 参数指定了代码块执行的工作目录. 同时它也常常与 <code>:file</code> 参数联用用于指明输出文件的相对路径. 默认情况下为org buffer的当前目录. 例如:
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC R :file myplot.png :dir ~/Work</span>
   matplot(matrix(rnorm(100), 10), type="l")
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
<code>:dir</code> 甚至还支持tramp格式的远程路径,这表示代码块是在远程机器上执行的. 例如
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC R :file plot.png :dir /dand@yakuba.princeton.edu:</span>
plot(1:10, main=system("hostname", intern=TRUE))
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>
</pre>
</div>
<p>
上面这段代码,会在org buffer中插入这么一条链接 
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #66D9EF; text-decoration: underline;"><a href="file:/scp:dand@yakuba.princeton.edu:/home/dand/plot.png">plot.png</a></span>
</pre>
</div>

<p>
<code>:dir</code> 参数的实现原理实际上就是更改 <code>default-directory</code> 的值
</p>
</div>
</li>

<li><a id="org707259b"></a>exports<br />
<div class="outline-text-5" id="text-10-5-2-6">
<p>
<code>:exports</code> 参数指定了当将org file导出为HTML或LaTex时,是否包含代码块或其result
</p>

<dl class="org-dl">
<dt>code</dt><dd>默认值,包含代码块的内容</dd>
<dt>results</dt><dd>包含代码块的results</dd>
<dt>both</dt><dd>包含代码块及其results</dd>
<dt>none</dt><dd>都不包括</dd>
</dl>
</div>
</li>

<li><a id="org1dd9992"></a>tangle<br />
<div class="outline-text-5" id="text-10-5-2-7">
<p>
<code>:tangle</code> tangle是一个 bool 值的参数,取值为 <code>yes,no,filename</code> ,其作用是将所有源代码导出到一个文件。
</p>

<dl class="org-dl">
<dt>no</dt><dd>默认值,表示不抽取出该代码块中的代码</dd>
<dt>yes</dt><dd>抽取出代码块中的代码,存放的文件命为将该org文件后的 <code>.org</code> 替换为代码块语言后缀后的名称</dd>
<dt>filename</dt><dd>抽取出代码块中的代码,存放在filename中</dd>
</dl>
</div>
</li>

<li><a id="org055e75e"></a>mkdirp<br />
<div class="outline-text-5" id="text-10-5-2-8">
<p>
<code>:mkdirp</code> 用于决定当tangled file中的目录不存在时,是否创建该目录
</p>

<dl class="org-dl">
<dt>yes</dt><dd>主动创建不存在的目录</dd>
<dt>no</dt><dd>不自动创建不存在的目录</dd>
</dl>
</div>
</li>

<li><a id="org4551b88"></a>comments<br />
<div class="outline-text-5" id="text-10-5-2-9">
<p>
默认情况下tangle的过程只会把源代码的内容插入到外部文件中. 使用 <code>:comments</code> 参数可以让代码在tangle的过程中插入额外的注释信息
</p>

<dl class="org-dl">
<dt>no</dt><dd>默认情况,表示不插入额外的注释</dd>
<dt>link</dt><dd>插入额外的注释,一遍从源代码中能够链接回原org文件</dd>
<dt>yes</dt><dd>与 <code>link</code> 一样,只是为了向后兼容</dd>
<dt>org</dt><dd>将一部分org文件中的内容作为注释插入源文件中.The text is picked from the leading context of the tangled code and is limited by the nearest headline or source block as the case may be</dd>
<dt>both</dt><dd>link + org</dd>
<dt>noweb</dt><dd>开启link,同时 wraps expanded noweb references in the code block body in link comments.</dd>
</dl>
</div>
</li>

<li><a id="org16bb508"></a>padline<br />
<div class="outline-text-5" id="text-10-5-2-10">
<p>
<code>:padline</code> 参数决定了tangle时,是否在各个代码块之间使用空行间隔
</p>

<dl class="org-dl">
<dt>yes</dt><dd>在各代码块之间使用空行间隔</dd>
<dt>no</dt><dd>代码块之间不使用空行间隔</dd>
</dl>
</div>
</li>

<li><a id="org266f48d"></a>no-expand<br />
<div class="outline-text-5" id="text-10-5-2-11">
<p>
默认情况下,代码块中的代码需要先经过 <code>org-babel-expand-src-block</code> 的扩展后再tangle到源文件中. 这一过程涉及到替换 <code>:var</code> 中定义的参数与 <code>noweb</code> 引用
</p>

<p>
<code>:no-expand</code> 则会禁止这项操作
</p>
</div>
</li>

<li><a id="org3058415"></a>session<br />
<div class="outline-text-5" id="text-10-5-2-12">
<p>
<code>:session</code> 会让运行代码块的进程保持不关闭. 该功能只能对解析型的语言有效.
</p>

<p>
默认情况下,进程运行代码块后会自动退出
</p>

<p>
传递給 <code>:session</code> 的字符串会作为session的名称.
</p>
</div>
</li>

<li><a id="org674b526"></a>noweb<br />
<div class="outline-text-5" id="text-10-5-2-13">
<p>
<code>:noweb</code> 参数控制了在执行,tangle和export代码块时,如何展开noweb引用
</p>

<dl class="org-dl">
<dt>no</dt><dd>默认值,并不展开noweb引用</dd>
<dt>yes</dt><dd>在evaluated,tangled和exported前,展开noweb引用</dd>
<dt>tangle</dt><dd>只有tangle前,才展开noweb引用</dd>
<dt>no-export</dt><dd>tangle或evalute前才展开noweb引用</dd>
<dt>strip-export</dt><dd>evalute或tangle前才会展开noweb引用,且 <b>export</b> 前会把noweb引用删除</dd>
<dt>eval</dt><dd>只有在evaluate前才展开noweb引用</dd>
</dl>
</div>
</li>

<li><a id="orgaa304bc"></a>noweb-ref<br />
<div class="outline-text-5" id="text-10-5-2-14">
<p>
当扩展"noweb"引用时, 会扩展为任何名字或 <code>:noweb-ref</code> 参数为引用名字的代码块的内容的和. 例如
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC sh :tangle yes :noweb yes :shebang #!/bin/sh</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  &lt;&lt;fullest-disk&gt;&gt;</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #75715E;">: 83% /cygdrive/d</span>

<span style="color: #FD971F; background-color: #272822;">* the mount point of the fullest disk</span>
<span style="color: #75715E; font-weight: bold;">  :PROPERTIES:</span>
  <span style="color: #75715E; font-weight: bold;">:noweb-ref:</span> fullest-disk
<span style="color: #75715E; font-weight: bold;">  :END:</span>

<span style="color: #A6E22E; background-color: #272822;">** query all mounted disks</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC sh</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  df </span><span style="color: #E6DB74; background-color: #3E3D31; font-weight: bold;">\</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #A6E22E; background-color: #272822;">** strip the header row</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC sh</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  |sed </span><span style="color: #E6DB74; background-color: #3E3D31;">'1d'</span><span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #E6DB74; background-color: #3E3D31; font-weight: bold;">\</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #A6E22E; background-color: #272822;">** sort by the percent full</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC sh</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  |awk </span><span style="color: #E6DB74; background-color: #3E3D31;">'{print $5 " " $6}'</span><span style="color: #F8F8F0; background-color: #3E3D31;">|sort -n |tail -1 </span><span style="color: #E6DB74; background-color: #3E3D31; font-weight: bold;">\</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #A6E22E; background-color: #272822;">** extract the mount point</span>
#+BEGIN_SRC sh
  <span style="color: #A6E22E;">|awk '{print $2}'</span>
</pre>
</div>
<p>
#+END<sub>SRC</sub>
当tangle最上面那个代码块时,实际的内容整合了"the mount point of the fullest disk" headline下的所有代码块的内容
</p>
</div>
</li>

<li><a id="org370408f"></a>noweb-sep<br />
<div class="outline-text-5" id="text-10-5-2-15">
<p>
<code>:noweb-sep</code> 参数设置了整合各个代码块内容时,各代码块之间使用哪个字符串来分隔,默认为一个空行
</p>
</div>
</li>

<li><a id="org8af4c91"></a>cache<br />
<div class="outline-text-5" id="text-10-5-2-16">
<p>
<code>:cache</code> 参数决定了是否缓存代码块的执行结果. <b>但当对带有:session参数的代码块无效</b>
</p>

<dl class="org-dl">
<dt>no</dt><dd>默认,不对代码块的执行结果进行缓存</dd>
<dt>yes</dt><dd>对代码块的结果进行缓存.org会将代码块的内容做一个SHA1哈希计算,并在计算前做一次比较,若代码块并未改变则直接使用该缓存值.</dd>
</dl>

<p>
下面是一个例子:
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: random</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC R :cache yes</span>
runif(1)
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS[a2a72cd647ad44515fab62e144796432793d68e1]: random</span>
0.4659510825295

<span style="color: #75715E;">#+NAME: caller</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC emacs-lisp :var x=random :cache yes</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">x</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller</span>
0.254227238707244
</pre>
</div>
</div>
</li>

<li><a id="org5bd5da3"></a>sep<br />
<div class="outline-text-5" id="text-10-5-2-17">
<p>
The ‘:sep’ header argument can be used to control the delimiter used when writing tabular results out to files external to Org mode. 
This is used either when opening tabular results of a code block by calling the ‘org-open-at-point’ function bound to ‘C-c C-o’ on the code block, or when writing code block results to an external file (see *note file::) header argument.
</p>

<p>
By default, when ‘:sep’ is not specified output tables are tab delimited.
</p>
</div>
</li>

<li><a id="orged7488f"></a>hlines<br />
<div class="outline-text-5" id="text-10-5-2-18">
<p>
<code>:hline</code> 参数决定了当使用一个table作为输入时,是否去掉table中的hline. 默认为no,因为table总的hline会被转换为 <code>hline</code> symbol. 而这常常是一种干扰.
</p>

<dl class="org-dl">
<dt>no</dt><dd>去除input table中的横线</dd>
<dt>yes</dt><dd>保留input table总的横线</dd>
</dl>

<p>
下面是一个例子
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: many-cols</span>
<span style="color: #A6E22E;">| a | b | c |</span>
<span style="color: #A6E22E;">|---+---+---|</span>
<span style="color: #A6E22E;">| d | e | f |</span>
<span style="color: #A6E22E;">|---+---+---|</span>
<span style="color: #A6E22E;">| g | h | i |</span>

<span style="color: #75715E;">#+NAME: echo-table-1</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC python :var tab=many-cols</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  </span><span style="color: #F92672; background-color: #3E3D31;">return</span><span style="color: #F8F8F0; background-color: #3E3D31;"> tab</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: echo-table-1</span>
<span style="color: #A6E22E;">| a | b | c |</span>
<span style="color: #A6E22E;">| d | e | f |</span>
<span style="color: #A6E22E;">| g | h | i |</span>


<span style="color: #75715E;">#+NAME: echo-table-2</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC python :var tab=many-cols :hlines yes</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  </span><span style="color: #F92672; background-color: #3E3D31;">return</span><span style="color: #F8F8F0; background-color: #3E3D31;"> tab</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: echo-table-2</span>
<span style="color: #A6E22E;">| a | b | c |</span>
<span style="color: #A6E22E;">|---+---+---|</span>
<span style="color: #A6E22E;">| d | e | f |</span>
<span style="color: #A6E22E;">|---+---+---|</span>
<span style="color: #A6E22E;">| g | h | i |</span>
</pre>
</div>
</div>
</li>

<li><a id="org3e17600"></a>colnames<br />
<div class="outline-text-5" id="text-10-5-2-19">
<p>
<code>:colnames</code> 参数决定了当使用一个table作为输入时,是否将第一行的值看成是列名而去除.
</p>

<dl class="org-dl">
<dt>nil</dt><dd>默认值. 当第二行是一个hline时,则认为第一行为列名去除掉.</dd>
<dt>no</dt><dd>第一行不是列名,不要去除</dd>
<dt>yes</dt><dd>第一行作为列名去掉,然后 <b>再按照nil来处理</b></dd>
</dl>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: less-cols</span>
<span style="color: #A6E22E;">| a |</span>
<span style="color: #A6E22E;">|---|</span>
<span style="color: #A6E22E;">| b |</span>
<span style="color: #A6E22E;">| c |</span>

<span style="color: #75715E;">#+NAME: echo-table-again</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC python :var tab=less-cols</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  </span><span style="color: #F92672; background-color: #3E3D31;">return</span><span style="color: #F8F8F0; background-color: #3E3D31;"> [[val + </span><span style="color: #E6DB74; background-color: #3E3D31;">'*'</span><span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #F92672; background-color: #3E3D31;">for</span><span style="color: #F8F8F0; background-color: #3E3D31;"> val </span><span style="color: #F92672; background-color: #3E3D31;">in</span><span style="color: #F8F8F0; background-color: #3E3D31;"> row] </span><span style="color: #F92672; background-color: #3E3D31;">for</span><span style="color: #F8F8F0; background-color: #3E3D31;"> row </span><span style="color: #F92672; background-color: #3E3D31;">in</span><span style="color: #F8F8F0; background-color: #3E3D31;"> tab]</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: echo-table-again</span>
<span style="color: #A6E22E;">| b* |</span>
<span style="color: #A6E22E;">| c* |</span>

</pre>
</div>

<p>
请注意, <b>去除列名的动作发生在使用index切片之前</b>
</p>
</div>
</li>

<li><a id="org894824a"></a>rownames<br />
<div class="outline-text-5" id="text-10-5-2-20">
<p>
<code>:rownames</code> 参数决定了当使用一个table作为输入时,是否将第一列的值看成是行名而去除. 默认为no
</p>

<dl class="org-dl">
<dt>no</dt><dd>第一列不是行名</dd>
<dt>yes</dt><dd>第一列是行名</dd>
</dl>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+NAME: with-rownames</span>
<span style="color: #A6E22E;">| one | 1 | 2 | 3 | 4 |  5 |</span>
<span style="color: #A6E22E;">| two | 6 | 7 | 8 | 9 | 10 |</span>

<span style="color: #75715E;">#+NAME: echo-table-once-again</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC python :var tab=with-rownames :rownames yes</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  </span><span style="color: #F92672; background-color: #3E3D31;">return</span><span style="color: #F8F8F0; background-color: #3E3D31;"> [[val + 10 </span><span style="color: #F92672; background-color: #3E3D31;">for</span><span style="color: #F8F8F0; background-color: #3E3D31;"> val </span><span style="color: #F92672; background-color: #3E3D31;">in</span><span style="color: #F8F8F0; background-color: #3E3D31;"> row] </span><span style="color: #F92672; background-color: #3E3D31;">for</span><span style="color: #F8F8F0; background-color: #3E3D31;"> row </span><span style="color: #F92672; background-color: #3E3D31;">in</span><span style="color: #F8F8F0; background-color: #3E3D31;"> tab]</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS: echo-table-once-again</span>
<span style="color: #A6E22E;">| one | 11 | 12 | 13 | 14 | 15 |</span>
<span style="color: #A6E22E;">| two | 16 | 17 | 18 | 19 | 20 |</span>
</pre>
</div>

<p>
请注意, <b>去除行名的动作发生在使用index切片之前</b>
</p>
</div>
</li>

<li><a id="orgf36891d"></a>shebang<br />
<div class="outline-text-5" id="text-10-5-2-21">
<p>
<code>:shebang</code> 参数设置shebang行,它在tangling时会将值插入到tangled file中的第一行去,并将其标识为可执行的.
</p>
</div>
</li>

<li><a id="orgaa1ced3"></a>tangle-mode<br />
<div class="outline-text-5" id="text-10-5-2-22">
<p>
<code>:tangle-mode</code> 参数设置tangled file的权限模式. 它的值会被传递给函数 <code>set-file-modes</code>. 它的值会覆盖 <code>:shebang</code> 的效果
</p>

<p>
当多个代码块tangling到同一个file,而各代码块的 <code>:tangle-mode</code> 不相同的话,其结果是未知的.
</p>
</div>
</li>

<li><a id="org0c4fa07"></a>eval<br />
<div class="outline-text-5" id="text-10-5-2-23">
<p>
<code>:eval</code> 参数决定了什么情况下可以执行代码块中的代码. 默认情况下的行为由变量 <code>org-confirm-babel-evaluate</code> 的值决定
</p>

<dl class="org-dl">
<dt>never/no</dt><dd>任何条件下都不能执行</dd>
<dt>query</dt><dd>询问是否执行</dd>
<dt>never-export/no-export</dt><dd>在export时不能执行,但可以手工执行</dd>
<dt>query-export</dt><dd>export时询问是否执行</dd>
</dl>
</div>
</li>

<li><a id="orgf6f1270"></a>wrap<br />
<div class="outline-text-5" id="text-10-5-2-24">
<p>
<code>:wrap</code> 用于决定将代码块的执行结果用什么标识符包裹起来.
</p>

<p>
任意传递給 <code>:wrap</code> 的&lt;string&gt;,都会将结果包裹在 <code>#+BEGIN_&lt;string&gt;</code> 与 <code>#+END_&lt;string&gt;</code> 中
</p>

<p>
若只有一个单独的 <code>:wrap</code>,则结果会包裹在 <code>#+BEGIN</code> 与 <code>#+END_RESULTS</code> 中
</p>
</div>
</li>

<li><a id="org249ec07"></a>post<br />
<div class="outline-text-5" id="text-10-5-2-25">
<p>
<code>:post</code> 参数用于决定了得到代码块的result后,该result要传递到哪个代码块中作进一步的处理. 这时,result的值临时绑定到 <code>*this*</code> 变量中. 例如
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E;">#+name: attr_wrap</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+begin_src sh :var data="" :var width="\\textwidth" :results output</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  </span><span style="color: #F92672; background-color: #3E3D31;">echo</span><span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #E6DB74; background-color: #3E3D31;">"#+ATTR_LATEX :width $width"</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  </span><span style="color: #F92672; background-color: #3E3D31;">echo</span><span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #E6DB74; background-color: #3E3D31;">"$data"</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+end_src</span>

<span style="color: #75715E;">#+header: :file /tmp/it.png</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+begin_src dot :post attr_wrap(width="5cm", data=*this*) :results drawer</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  digraph{</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">          a -&gt; b;</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">          b -&gt; c;</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">          c -&gt; a;</span>
<span style="color: #F8F8F0; background-color: #3E3D31;">  }</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+end_src</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #75715E; font-weight: bold;">:RESULTS:</span>
<span style="color: #75715E;">#+ATTR_LATEX :width 5cm</span>
<span style="color: #66D9EF; text-decoration: underline;"><a href="file:/tmp/it.png">file:/tmp/it.png</a></span>
<span style="color: #75715E; font-weight: bold;">:END:</span>
</pre>
</div>
</div>
</li>

<li><a id="orgb93d13a"></a>prologue<br />
<div class="outline-text-5" id="text-10-5-2-26">
<p>
<code>:prologue</code> 参数决定了在执行代码块中的代码之前,作什么初始化操作
</p>
</div>
</li>

<li><a id="org8ed276f"></a>epilogue<br />
<div class="outline-text-5" id="text-10-5-2-27">
<p>
<code>:epilogue</code> 参数决定了在执行代码块中的代码之后,作什么清理操作
</p>
</div>
</li>
</ol>
</div>
</div>

<div id="outline-container-org4f1937d" class="outline-3">
<h3 id="org4f1937d"><span class="section-number-3">10.6</span> 处理代码块的运行结果</h3>
<div class="outline-text-3" id="text-10-6">
<p>
<code>:session</code> 与 <code>:results</code> 为 <code>value</code> 还是 <code>output</code> 共同决定了results的结果
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">Non-session</th>
<th scope="col" class="org-left">session</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">:results value</td>
<td class="org-left">最后语句的返回值</td>
<td class="org-left">最后语句的返回值</td>
</tr>

<tr>
<td class="org-left">:results output</td>
<td class="org-left">STDOUT的输出</td>
<td class="org-left">解释器的输出结果</td>
</tr>
</tbody>
</table>

<p>
<b>当 <code>:results value</code> 时,无论是否开启 <code>:session</code> ,results都会尽可能的以table的方式展示出来</b>
</p>

<p>
<b>当 <code>:results value</code> 时,代码块的内容会被包含在一个函数中,然后执行该函数. 因此对于像Python这样的语言来说,若最后语句不是return,则一定返回None</b>
</p>

<p>
<b>注意 <code>:results output</code> 在session与non-session时的不同</b>
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #75715E; background-color: #35331D; font-style: italic;">#+BEGIN_SRC python :results output</span>
<span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #F92672; background-color: #3E3D31;">print</span><span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #E6DB74; background-color: #3E3D31;">"hello"</span>
<span style="color: #F8F8F0; background-color: #3E3D31;"> 2</span>
<span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #F92672; background-color: #3E3D31;">print</span><span style="color: #F8F8F0; background-color: #3E3D31;"> </span><span style="color: #E6DB74; background-color: #3E3D31;">"bye"</span>
<span style="color: #75715E; background-color: #35331D; font-style: italic;">#+END_SRC</span>

<span style="color: #75715E;">#+RESULTS:</span>
<span style="color: #75715E;">: hello</span>
<span style="color: #75715E;">: bye</span>


#+BEGIN_SRqC python :results output :session
 print "hello"
 2
 print "bye"
#+END_SRC

#+RESULTS:
<span style="color: #75715E;">: hello</span>
<span style="color: #75715E;">: 2</span>
<span style="color: #75715E;">: bye</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-orgf7c4aa0" class="outline-3">
<h3 id="orgf7c4aa0"><span class="section-number-3">10.7</span> 代码块相关快捷键与函数</h3>
<div class="outline-text-3" id="text-10-7">
<p>
在代码块中
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">‘C-c C-c’</td>
<td class="org-left">‘org-babel-execute-src-block’</td>
</tr>

<tr>
<td class="org-left">‘C-c C-o’</td>
<td class="org-left">‘org-babel-open-src-block-result’</td>
</tr>

<tr>
<td class="org-left">‘M-&lt;up&gt;’</td>
<td class="org-left">‘org-babel-load-in-session’</td>
</tr>

<tr>
<td class="org-left">‘M-&lt;down&gt;’</td>
<td class="org-left">‘org-babel-switch-to-session’</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org6dedcf6" class="outline-2">
<h2 id="org6dedcf6"><span class="section-number-2">11</span> Capture(捕获) - Refile(整理) - Archive(归档)</h2>
<div class="outline-text-2" id="text-11">
</div>
<div id="outline-container-org6447a0f" class="outline-3">
<h3 id="org6447a0f"><span class="section-number-3">11.1</span> Capture</h3>
<div class="outline-text-3" id="text-11-1">
</div>
<div id="outline-container-org2511265" class="outline-4">
<h4 id="org2511265"><span class="section-number-4">11.1.1</span> 设置capture的记录保存位置和快捷键</h4>
<div class="outline-text-4" id="text-11-1-1">
<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #F92672;">setq</span> org-default-notes-file (concat org-directory <span style="color: #E6DB74;">"/notes.org"</span>))
(define-key global-map <span style="color: #E6DB74;">"\C-cc"</span> 'org-capture)
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgd722988" class="outline-2">
<h2 id="orgd722988"><span class="section-number-2">12</span> 快速输入 #+BEGIN<sub>SRC</sub> … #+END<sub>SRC</sub></h2>
<div class="outline-text-2" id="text-12">
<p>
用org-mode写文章的的时候，经常需要引用代码片段或者程序输出，这就需要输入 #+BEGIN<sub>SRC</sub> &#x2026; #+END<sub>SRC</sub> 或者 #+BEGIN<sub>EXAMPLE</sub> &#x2026; #+END<sub>EXAMPLE</sub> 。输入的次数多了，就会想办法自动化，要么是用宏，要么是手工写 elisp函数，要么是借助 yasnippets 或者 skeleton 框架来写代码片段（比如 Emacs中文网 就发过一篇 《GNU Emacs Org-mode 写作的几个快捷方式》 ，那是借助 skeleton 来实现的）。
</p>

<p>
但其实，org-mode已经内置了快速输入的方法: 输入 &lt;s 再按TAB键 ，就会自动展开为 #+BEGIN<sub>SRC</sub> &#x2026; #+END<sub>SRC</sub> 。类似地，输入 &lt;e 再按TAB键，就会自动展开为 #+BEGIN<sub>EXAMPLE</sub> &#x2026; #+END<sub>EXAMPLE</sub> 。
</p>
</div>
</div>
<div id="outline-container-orge63042b" class="outline-2">
<h2 id="orge63042b"><span class="section-number-2">13</span> 导出</h2>
<div class="outline-text-2" id="text-13">
<p>
<code>C-c C-e</code> 导出命令
</p>
</div>
<div id="outline-container-org08fcfa2" class="outline-3">
<h3 id="org08fcfa2"><span class="section-number-3">13.1</span> 生成目录表</h3>
<div class="outline-text-3" id="text-13-1">
<p>
如果想在导出成HTML时在文档前面生成一个章节目录表（Table of Contents），那么可以在文件头部的 OPTIONS 里面添加 toc:t 参数
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+OPTIONS: toc:t  ^:nil author:nil num:2
</pre>
</div>
<p>
也可以设置 <code>org-export-with-toc</code> 这个变量
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #F92672;">setq</span> org-export-with-toc t)
</pre>
</div>

<p>
如果只想针对前面两个级别生成目录表，可以设置该值为相应的数字
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+OPTIONS: toc:2  ^:nil author:nil num:2
</pre>
</div>
</div>
</div>
<div id="outline-container-org8c05b20" class="outline-3">
<h3 id="org8c05b20"><span class="section-number-3">13.2</span> 为每个分节的标题添加标号</h3>
<div class="outline-text-3" id="text-13-2">
<p>
导出成HTML时，如果不自定义css（这个高级话题留待下次再说），那么h1, h2, h3各个级别的标题只会字体大小有 点不同，不会呈现不同颜色，不会有缩进，于是阅读起来各节之间的关系就搞不清楚了。可以设置 org-export-with-section-numbers 让导出时为各章节的标题添加 1.2.3 这样的
</p>

<p>
比如:
</p>
<pre class="example">
* header foobar

** header hello

** header welcome

* header hehe
some text here

** header haha

*** low level
</pre>
<p>
导出时会变成:
</p>
<pre class="example">
1 header foobar

1.1 header hello

1.2 header welcome

2 header hehe
some text here

2.1 header haha

2.1.1 low level
</pre>
<p>
如果只想针对前面两个级别生成分节号，可以设置该值为相应的数字。比如上面的例子如果设置 <code>org-export-with-section-numbers</code> 为 2 ，导出时就变成了:
</p>
<pre class="example">
1 header foobar

1.1 header hello

1.2 header welcome

2 header hehe
some text here

2.1 header haha

*low level*
</pre>
</div>
</div>
<div id="outline-container-org4d1ee99" class="outline-3">
<h3 id="org4d1ee99"><span class="section-number-3">13.3</span> 禁用下划线转义</h3>
<div class="outline-text-3" id="text-13-3">
<p>
org-mode的文档在导出到html时,有一个问题就是abc<sub>def</sub> 会变成类似于latex的下标形式.类似的 10<sup>24</sup> 会变成上标形式.
</p>

<p>
关闭这个功能的方法是在org文件头部的 <code>OPTIONS</code> 里面添加 <code>^:nil:</code>
</p>
<pre class="example">
#+OPTIONS: ^:nil
</pre>
<p>
上面的方法是针对当前文件的，如果想针对所有文件缺省关闭这个功能，需要在 <code>~/.emacs</code> 中设置:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #F92672;">setq-default</span> org-use-sub-superscripts nil)
</pre>
</div>
</div>
</div>
<div id="outline-container-org39bb73d" class="outline-3">
<h3 id="org39bb73d"><span class="section-number-3">13.4</span> 让不同级别的标题采用不同大小的字体</h3>
<div class="outline-text-3" id="text-13-4">
<p>
定制一下 org-level-1, org-level-2 等face的 height 属性就可以了（不过如果你用了其它theme的话， 要在加载这些theme之后再执行一遍下面这些配置，或者你把它们放在 org-mode-hook 中去执行）:
</p>

<p>
(set-face-attribute 'org-level-1 nil :height 1.6 :bold t)
(set-face-attribute 'org-level-2 nil :height 1.4 :bold t)
(set-face-attribute 'org-level-3 nil :height 1.2 :bold t)))
</p>
</div>
</div>
</div>
<div id="outline-container-org4818892" class="outline-2">
<h2 id="org4818892"><span class="section-number-2">14</span> 两个与中文相关的问题</h2>
<div class="outline-text-2" id="text-14">
</div>
<div id="outline-container-org3c3f178" class="outline-3">
<h3 id="org3c3f178"><span class="section-number-3">14.1</span> 不关闭中文输入法，输入章节标题里面的星号</h3>
<div class="outline-text-3" id="text-14-1">
<p>
频繁打开/关闭输入法还是挺翻的，比如在连续输入章节或者列表项时，输入章节前面的 * 或者 列表项 前面的 * 或者 - 号，都要先关闭输入法，否则输入的是 × 和
</p>

<p>
不过可以用下面的方法解决:
</p>

<p>
(defun org-mode-my-init ()
  ; &#x2026;&#x2026;
  (define-key org-mode-map (kbd "×") (kbd "*"))
  (define-key org-mode-map (kbd "－") (kbd "-"))
  )
</p>

<p>
(add-hook 'org-mode-hook 'org-mode-my-init)
</p>
</div>
</div>
<div id="outline-container-org3fd2d6d" class="outline-3">
<h3 id="org3fd2d6d"><span class="section-number-3">14.2</span> 中英文字体混排时的表格对齐问题</h3>
<div class="outline-text-3" id="text-14-2">
<p>
org-mode的表格功能还是比较酷的，用起来相当方便（比较大的缺点是不支持跨列或者跨行合并单元格，甚至简单 一点，表格的某一行实际两行来存放内容（就是类似html编辑器里面那种单元格自动折行的显示方式）也不行）。
</p>

<p>
对于中文用户来说，最容易碰到的一个问题是一旦表格中同时有中英文的话，表格会无法对齐，中文比较少的时候 还好，只会有一点点错位，但当中文比较多时，这个表格就乱成一团，没法看了。
</p>

<p>
orgtable-unaligned
</p>

<p>
(本图非本人制作，摘自: 让中英混杂的orgmode table对齐）
</p>

<p>
这个问题困扰了很多人，大家也 折腾了各种方法。
</p>

<p>
首先是有人留意到，其实不仅仅是org-mode里面有问题，emacs本身在中英文混排时一个中文字符就跟两个英文字符 不是同样宽度的，除非有时碰巧了（比如当初我在Ubuntu下用Ubuntu Mono作为emacs默认字体时）。所以最开始我 一直在尝试各种字体，看哪种可以解决这个问题——但一直没有满意的方案，在一个机器上试验出来的结果在另外一 个系统上却不好使。最后发现是搞错了方向。
</p>

<p>
对于大部分的编辑器而言，我们只能选择一种字体（比如写代码常用的DejaVu Sans Mono, Inconsolata, Consolas），但这个字体中可能仅包含英文字符（或者也包含了其它拉丁字符），但大部分情况下不包含CJK字符， 对这种情况下对CJK字符的显示都是由系统来处理的，编辑器自己一般都不管。
</p>

<p>
不过Emacs毕竟是神的编辑器啊，它可以做到对不同体系的字符指定具体的字体，所以解决这个问题的办法是: 针 对中英文指定不同大小的字体，英文用小字，中文用大字 （别问我为什么，我是没去仔细研究。下面有一堆链接， 有兴趣的自己去看吧）。
</p>

<p>
(set-default-font "DejaVu Sans Mono 10")
(set-fontset-font "fontset-default" 'unicode"WenQuanYi Bitmap Song 12") ;;for linux
(set-fontset-font "fontset-default" 'unicode "宋体 12") ;; for windows
在你的环境上，你可能得对针对自己喜欢的编程字体去试验一下，看配哪个字号的中文字体（以及字号大小）可以 解决这个问题（或者可以试试下面的font.pl）。如果你还有日文、韩文什么的，可以详细地针对各种charset设定 字体（而不是像上面笼统地用 'unicode 来制定），详情请参看 折腾Emacs: 中文字体配置 | Emacs中文网。
</p>

<p>
<a href="https://www.cnblogs.com/bamanzi/p/org-mode-tips.html">参考文章</a></p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
The link is: <a href="http://orgmode.org">http://orgmode.org</a>
</p>

<p class="footpara">
注脚命令：
</p>
<ul class="org-ul">
<li><code>C-c C-x f</code>  当光标位于注脚引用处,该命令会跳转到注脚定义处. 若光标处于注脚定义处,跳转到(第一个)引用处.否则,创建一个新的注脚.</li>
<li><code>C-c C-c</code> 当光标位于注脚引用处时,跳转到注脚定义处. 若光标处于注脚定义处,则跳转回注脚引用处. 若在标注位置上用带前置参数的方式调用该命令,则弹出一个与C-c C-x f一样的菜单.</li>
<li><code>C-c C-o</code> 不知道是啥</li>
</ul></div></div>


</div>
</div></div>
<div id="postamble" class="status">
<p class="date">Created: 2020-06-03 周三 20:13</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
