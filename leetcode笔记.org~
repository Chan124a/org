* 优先队列
1046题
#+BEGIN_SRC c++
#include <queue>
//升序队列
priority_queue <int,vector<int>,greater<int> > q;
//降序队列
priority_queue <int,vector<int>,less<int> >q;
#+END_SRC
* 多维数组的定义
#+BEGIN_SRC c++
//二维
vector<vector<int>> a;

//三维
vector< vector< vector<int> > > b;
#+END_SRC
* 数组的初始化
#+BEGIN_SRC c++
//一维
vector<int> a(5,1)  //定义了5维数组,其中的值都为1
//二维
vector<vector<int>> a(5，vector<int>(2,1)) //定义了二维数组，第一个维度为5，第二个维度里的每一个数组的维度都为2，值都为1
//三维
vector<vector<vector<int>>> dp(2, vector<vector<int>>(3, vector<int>(4, 5)));
#+END_SRC
* multiset
set和multiset会根据特定的排序准则，自动将元素进行排序。不同的是后者允许元素重复而前者不允许。
#+BEGIN_SRC c++
#include <set>
multiset<int> st;
#+END_SRC
和所有关联式容器类似，通常使用平衡二叉树完成。事实上，set和multiset通常以红黑树实作而成。

自动排序的优点是使得搜寻元素时具有良好的性能，具有对数时间复杂度。但是造成的一个缺点就是：
- 不能直接改变元素值。因为这样会打乱原有的顺序。
- 改变元素值的方法是：先删除旧元素，再插入新元素。
- 存取元素只能通过迭代器，从迭代器的角度看，元素值是常数。

* 快速排序
记得要从右边开始循环

下面这种快速选择的算法也是可以参考的(第215题)：
#+BEGIN_SRC c++
int search(vector<int>& nums, int left, int right) {
        int x = rand() % (right - left + 1) + left; //随机化选择
        swap(nums[x], nums[left]);
        int p = nums[left];
        int j = left;
        for (int i = left+1; i<=right; i++)
        {
            if (nums[i] < p) {
                j++;
                swap(nums[j], nums[i]);
            }
        }
        swap(nums[j], nums[left]);
        return j;
    }
#+END_SRC

* 随机化
srand()是给随机数产生器一个种子，time(NULL)就是把当前的时间值作为种子。
要取得[a,b)的随机整数，使用 ~(rand() % (b-a))+ a~;
要取得[a,b]的随机整数，使用 ~(rand() % (b-a+1))+ a~;
要取得(a,b]的随机整数，使用 ~(rand() % (b-a))+ a + 1~;
* c++类型转换
#+BEGIN_SRC c++
long long z = static_cast<long long>(nums[right]);
#+END_SRC
* KMP算法
第28题
#+BEGIN_SRC c++
class Solution {
public:
    void create(vector<int>& next, string needle) {
        next[0] = -1;
        int j = -1;
        for (int i = 1; i < needle.size(); i++)
        {
            while (j != -1 && needle[i] != needle[j + 1])j = next[j];
            if (needle[i] == needle[j + 1])j++;
            next[i] = j;
        }
    }
    int strStr(string haystack, string needle) {
        if (needle.size() == 0)return 0;
        if (haystack.size() == 0)return -1;
        int n = haystack.size(), m = needle.size();
        vector<int> next(m);
        create(next, needle);
        int j = -1;
        for (int i = 0; i < n; i++) {
            while (j != -1 && haystack[i] != needle[j + 1])j = next[j];
            if (haystack[i] == needle[j + 1])j++;
            if (j == m - 1)return i - m+1;
        }
        return -1;
    }
};
#+END_SRC

* reverse
#+BEGIN_SRC c++
//给定 matrix = 
//[
//  [1,4,7],
//  [2,5,8],
//  [3,6,9]
//]
//对其以中轴线进行翻转
for (auto& row : matrix)
    reverse(row.begin(), row.end());
//结果为：
//[
//  [7,4,1],
//  [8,5,2],
//  [9,6,3]
//]
#+END_SRC
* C++ vector 的 begin()、end()、front()、back() 区别
一、begin函数

函数原型:

iterator begin();

const_iterator begin();

功能：

返回一个当前vector容器中起始元素的迭代器。

 

二、end函数

函数原型：

iterator end();

const_iterator end();

功能：

返回一个当前vector容器中末尾元素的迭代器。

 

三、front函数

函数原型：

reference front();

const_reference front();

功能：

返回当前vector容器中起始元素的引用。

 

四、back函数

函数原型：

reference back();

const_reference back();

功能：

返回当前vector容器中末尾元素的引用。

leetcode 第56题
#+BEGIN_SRC c++
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if (intervals.size() == 0)return {};
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> merged;
        for (int i = 0; i < intervals.size(); i++) {
            int l = intervals[i][0], r = intervals[i][1];
            if (!merged.size() || merged.back()[1] < l) {
                merged.push_back({ l,r });
            }
            else {
                merged.back()[1] = max(merged.back()[1], r);
            }
        }
        return merged;
    }
};
#+END_SRC
* 形参传值和传引用运行速度的差异
C++在做递归回溯算法相关题目时，递归函数形参传值和传引用运行速度有很大的差异。

这是我第79题dfs函数的声明，主要区别是visited和word，一个是传值，一个是传引用。前者执行超时，后者在本题是32ms.

个人理解为传值时每次递归调用都要在内存中新建立一个vector 来保存visit传入的值，但是传引用直接在visited原始位置操作，不需要进行新建变量与赋值，节省了代码运行的空间与时间开销。
#+BEGIN_SRC c++
void dfs(vector<vector<char>>& board,vector<vector<int>>visited,int x,int y,int n,string word,bool& flag)
void dfs(vector<vector<char>>& board,vector<vector<int>>& visited,int x,int y,int n
#+END_SRC

* map的迭代器用法
第90题
#+BEGIN_SRC c++
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        map<int,int> num;
        for (int i = 0; i < nums.size(); i++)
        {
            num[nums[i]]++;
        }
        vector<vector<int>> ans = { {} };
        for (auto t : num) {
            int n = ans.size();
            for (int i = 0; i < n; i++) {
                vector<int> temp = ans[i];
                for (int j = 0; j < t.second; j++)
                {
                    temp.push_back(t.first);
                    ans.push_back(temp);
                }
            }
        }
        return ans;
    }
};
#+END_SRC
* 字符串
** 字符串连接
 string res = ""
 可以用 res+="V" 表示字符串 "V"
** 关于insert和erase的用法
#+BEGIN_SRC c++
class Solution {
public:
    vector<string> ans;
    vector<string> restoreIpAddresses(string s) {
        string cur = s;
        int n = s.size();
        helper(0, -1, n, s, cur);
        return ans;
    }
    void helper(int point_count,int last_point,int n,string &s,string &cur) {
        if (point_count == 3) {
            if (check(last_point + 1, n - 1, s)) {
                ans.push_back(cur);
            }
            return;
        }
        for (int i = last_point+1; i < n-1; i++)
        {
            if (check(last_point + 1, i, s)) {
                //注意这里Insert加了cur.being(),而后面的erase()没加
                cur.insert(cur.begin() + i + point_count + 1, '.');
                helper(point_count + 1, i,n, s, cur);
                cur.erase(i + point_count + 1, 1);
            }
        }
        return;
    }
    bool check(int left, int right, string& s) {
        int num = 0;
        for (int i = left; i <=right; i++)
        {
            if (s[left] == '0' && left != right)return false;
            num = num * 10 + s[i] - '0';
            if (num > 255)return false;
        }
        return true;
    }
};
#+END_SRC
* 用迭代实现二叉树中序遍历
第94题

核心思想:
- 使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色。
- 如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。
- 如果遇到的节点为灰色，则将节点的值输出。

python版本:
#+BEGIN_SRC python
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        WHITE, GRAY = 0, 1
        res = []
        stack = [(WHITE, root)]
        while stack:
            color, node = stack.pop()
            if node is None: continue
            if color == WHITE:
                stack.append((WHITE, node.right))
                stack.append((GRAY, node))
                stack.append((WHITE, node.left))
            else:
                res.append(node.val)
        return res
#+END_SRC
c++版本
#+BEGIN_SRC c++
class Solution {
	vector<int>ans;
public:
	vector<int> inorderTraversal(TreeNode* root) {
		int white = 0;
		int gray = 1;
		stack<pair<int, TreeNode*>>s;
		s.push(make_pair(white,root));
		while (!s.empty())
		{
			int color = s.top().first;
			TreeNode* t = s.top().second;
			s.pop();
			if (t == NULL) continue;
			if (color == white)
			{
				s.push(make_pair(white, t->right));
				s.push(make_pair(gray, t));
				s.push(make_pair(white, t->left));
			}
			else ans.push_back(t->val);
		}
		return ans;
	}
};
#+END_SRC
* 函数返回指针
第116题
#+BEGIN_SRC c++
class Solution {
public:
    Node* connect(Node* root) {
        if (root == NULL)return NULL;
        auto left = root->left;
        auto right = root->right;
        while (left!=NULL)
        {
            left->next = right;
            left = left->right;
            right = right->left;
        }
        connect(root->left);  //注意这里不需要设置一个向量来存储函数范围的指针
        connect(root->right); //注意这里不需要设置一个向量来存储函数范围的指针
        return root;
    }
};
#+END_SRC
* 如何把一个整数转化为string
** string转int的方式
采用最原始的string, 然后按照十进制的特点进行算术运算得到int，但是这种方式太麻烦，这里不介绍了。

采用标准库中atoi函数。

string s = "12"; 
int a = atoi(s.c_str()); 
对于其他类型也都有相应的标准库函数，比如浮点型atof(),long型atol()等等。

采用sstream头文件中定义的字符串流对象来实现转换。

istringstream is("12"); //构造输入字符串流，流的内容初始化为“12”的字符串 
int i; 
is >> i; //从is流中读入一个int整数存入i中

** int转string的方式
采用标准库中的to_string函数。

int i = 12; 
cout << std::to_string(i) << endl; 
不需要包含任何头文件，应该是在utility中，但无需包含，直接使用，还定义任何其他内置类型转为string的重载函数，很方便。

采用sstream中定义的字符串流对象来实现。

ostringstream os; //构造一个输出字符串流，流内容为空 
int i = 12; 
os << i; //向输出字符串流中输出int整数i的内容 
cout << os.str() << endl; //利用字符串流的str函数获取流中的内容 
字符串流对象的str函数对于istringstream和ostringstream都适用，都可以获取流中的内容。

* c++ 将一个char 转化为string
#+BEGIN_SRC c++
const char c = 'a';
//1.使用 string 的构造函数
string s(1,c);
//2.声明string 后将char push_back
string s1;
s1.push_back(c);
//3.使用stringstream
stringstream ss;
ss << c;
string str2 = ss.str();

//注意 使用to_string 方法会转化为char对应的ascii码
//原因是 to_string 没有接受char型参数的函数原型，有一个参数类型
//为int 的函数原型，所以传入char型字符 实际是先将char 转化
//为int 型的ascii 码，然后再转变为string
//以下输出结果为 97
cout << to_string(c) << endl;
#+END_SRC
* 除留余数法
给定一个正整数，返回它在 Excel 表中相对应的列名称。

例如，

    1 -> A
    2 -> B
    3 -> C
    ...
    26 -> Z
    27 -> AA
    28 -> AB 
    ...
示例 1:

输入: 1
输出: "A"
示例 2:

输入: 28
输出: "AB"
示例 3:

输入: 701
输出: "ZY"
#+BEGIN_SRC c++
class Solution {
public:
	string convertToTitle(int n) {
		string ans;
		while (n != 0)
		{
			n--;
			char c = n% 26 + 'A';
			string temp(1, c);
			ans = temp + ans;
			n /= 26;
		}
		return ans;
	}
};  
#+END_SRC
下面是我的错误解法：
#+BEGIN_SRC c++
class Solution {
public:
	string convertToTitle(int n) {
		string ans;
		while (n != 0)
		{
			char c = (n-1)% 26 + 'A';
			string temp(1, c);
			ans = temp + ans;
			n /= 26;
		}
		return ans;
	}
};  
#+END_SRC
这种解法在n=701(zy)时输出的结果为AZY，是错误的。
* 谓词、lambda表达式

第179题

给定一组非负整数 nums，重新排列它们每位数字的顺序使之组成一个最大的整数。

注意：输出结果可能非常大，所以你需要返回一个字符串而不是整数。

 

示例 1：

输入：nums = [10,2]
输出："210"
示例 2：

输入：nums = [3,30,34,5,9]
输出："9534330"
示例 3：

输入：nums = [1]
输出："1"
示例 4：

输入：nums = [10]
输出："10"
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 109

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/largest-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#+BEGIN_SRC c++
class Solution {
public:
    string largestNumber(vector<int>& nums) {
        if (all_of(nums.begin(), nums.end(), [](int x) {return x == 0; })) {
            return string("0");
        }
        vector<string> strNums(nums.size());
        std::transform(nums.begin(), nums.end(), strNums.begin(), [](int x) {return std::to_string(x); });
        std::sort(strNums.begin(), strNums.end(), [](const string& x, const string& y) {   //这里string& x不加&也是可以通过的
            return x + y > y + x;
            });
        return std::accumulate(strNums.begin(), strNums.end(), string());
    }
};
#+END_SRC
* 桶排序
第220题

在整数数组 nums 中，是否存在两个下标 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值小于等于 t ，且满足 i 和 j 的差的绝对值也小于等于 ķ 。

如果存在则返回 true，不存在返回 false。

示例 1:

输入: nums = [1,2,3,1], k = 3, t = 0
输出: true
示例 2:

输入: nums = [1,0,1,1], k = 1, t = 2
输出: true
示例 3:

输入: nums = [1,5,9,1,5,9], k = 2, t = 3
输出: false

#+BEGIN_EXAMPLE
我们将数据分到 M 个桶 中。
每个数字nums[i] 都被我们分配到一个桶中
分配的依据就是 nums[i] // (t + 1)
这样相邻桶内的数字最多相差2 * t + 1
不相邻的桶一定不满足相差小于等于t
同一个桶内的数字最多相差t
因此如果命中同一个桶内，那么直接返回True
如果命中相邻桶，我们再判断一下是否满足 相差 <= t
否则返回False
需要注意的是，由于题目有索引相差k的要求，因此要维护一个大小为k的窗口，定期清除桶中过期的数字。
#+END_EXAMPLE

#+BEGIN_SRC c++
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        if(t<0) return false;
        //t+1可能会溢出，所以要+ 1LL
        long long mod = t + 1LL;
        unordered_map<long long,long long> buck;
        for(int i=0;i<nums.size();i++)
        {
            long long nth = nums[i] / mod;
            //可能nums[i]为负数，比如-4 / 5 以及 -4 / 5都等于0，所以负数要向下移动一位
            if(nums[i] < 0) nth--;
            //这里要用find 不能直接[],因为可能本身存储的数字就为0
            if(buck.find(nth)!=buck.end()) 
                return true;
            else if(buck.find(nth-1)!=buck.end() && abs(nums[i] - buck[nth-1]) <= t)
                return true;
            else if(buck.find(nth+1)!=buck.end() && abs(nums[i] - buck[nth+1]) <= t)
                return true;
            buck[nth] = nums[i];
            if(i >= k)
            {
                buck.erase(nums[i - k] / mod);
            }
        }
        return false;
    }
};
#+END_SRC



* 由vector创建set
217. 存在重复元素

#+BEGIN_EXAMPLE
给定一个整数数组，判断是否存在重复元素。

如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。

 

示例 1:

输入: [1,2,3,1]
输出: true
示例 2:

输入: [1,2,3,4]
输出: false
示例 3:

输入: [1,1,1,3,3,4,3,2,4,2]
输出: true

#+END_EXAMPLE
利用集合，与原数组比较大小
#+BEGIN_SRC c++
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {

         return nums.size() > unordered_set<int>(nums.begin(), nums.end()).size(); 
         //如果原数组的大小>集合的大小，则说明存在重复元素
    }
};
#+END_SRC
